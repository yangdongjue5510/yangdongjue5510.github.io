<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mudura | 그거 뭐더라</title>
    <link>https://yangdongjue5510.github.io/</link>
    
    <atom:link href="https://yangdongjue5510.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>This is yangdongjue5510 dev blog.</description>
    <pubDate>Thu, 03 Mar 2022 16:37:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>자원을 직접 명시하지 말고 의존 객체 주입을 사용하라</title>
      <link>https://yangdongjue5510.github.io/2022/03/04/java/effective-java/effective5/</link>
      <guid>https://yangdongjue5510.github.io/2022/03/04/java/effective-java/effective5/</guid>
      <pubDate>Thu, 03 Mar 2022 15:47:28 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;클래스가 내부에 특정 자원에 의존하고, 그 클래스의 행동이 특정 자원에 따라 영향을 많이 받으면, 싱글톤과 정적 유틸리티 클래스로 구현하면 안된다.&lt;br&gt;이런 영향력이 있는 자원을</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>클래스가 내부에 특정 자원에 의존하고, 그 클래스의 행동이 특정 자원에 따라 영향을 많이 받으면, 싱글톤과 정적 유틸리티 클래스로 구현하면 안된다.<br>이런 영향력이 있는 자원을 클래스 내부에서 만들면 안된다.<br>대신 이 자원(혹은 자원을 만드는 팩토리)을 해당 클래스를 인스턴스화 할 때 넘겨주자.</p><h3 id="자원을-직접-명시하는-잘못된-예시-정적-유틸리티-amp-싱글턴"><a href="#자원을-직접-명시하는-잘못된-예시-정적-유틸리티-amp-싱글턴" class="headerlink" title="자원을 직접 명시하는 잘못된 예시 - 정적 유틸리티 &amp; 싱글턴"></a>자원을 직접 명시하는 잘못된 예시 - 정적 유틸리티 &amp; 싱글턴</h3><p>맞춤법 검사기가 사전을 자원으로 가진다고 가정하자.<br>만약 사전을 직접 명시한다는 건 어떤 얘기일까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//정적 유틸리티를 활용한 예제</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Dictionary dictionary = <span class="keyword">new</span> Dictionary(Language.ENGLISH);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SpellChecker</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//객체 생성 방지</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">changeSuggestions</span><span class="params">(String typo)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//싱글톤을 활용한 예제</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dictionary dictionary = <span class="keyword">new</span> Dictionary(Language.ENGLISH);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SpellChecker INSTANCE = <span class="keyword">new</span> SpellChecker();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SpellChecker</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">changeSuggestions</span><span class="params">(String typo)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 두 예시 모두 자원인 사전을  final로 직접 명시하고 있다. </p><ul><li>나중에 다른 사전을 사용하고 싶을 때 변경이 힘들어진다.</li><li>final을 제거하고 사전을 교체하는 메서드를 추가하는 방식은 멀티스레드 환경에 쓸 수 없음.</li></ul><p><strong>즉 사용하는 자원에 따라 동작이 달라지는 클래스에는 정적 유틸리티 클래스나 싱글턴 방식을 사용하면 안된다!</strong></p><h3 id="의존-객체-주입-예시-생성할-때-필요한-자원-넘겨주기"><a href="#의존-객체-주입-예시-생성할-때-필요한-자원-넘겨주기" class="headerlink" title="의존 객체 주입 예시 - 생성할 때 필요한 자원 넘겨주기"></a>의존 객체 주입 예시 - 생성할 때 필요한 자원 넘겨주기</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dictionary dictionary;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">(Dictionary dictionary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictionary = dictionary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//메서드..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>자원이 많거나 의존 관계가 어떻든 잘 작동</li><li>불변성을 지원</li><li>생성자, 정적 팩터리, 빌더 모두에 적용 가능</li></ul><h3 id="자원-팩터리로-의존-객체-주입-Supplier-lt-T-gt"><a href="#자원-팩터리로-의존-객체-주입-Supplier-lt-T-gt" class="headerlink" title="자원 팩터리로 의존 객체 주입 - Supplier&lt;T&gt;"></a>자원 팩터리로 의존 객체 주입 - Supplier&lt;T&gt;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dictionary dictionary;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">(Supplier&lt;? extends Dictionary&gt; dictionaryFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictionary = dictionaryFactory.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//메서드...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자원 팩토리란 호출할 때마다 특정 타입의 인스턴스를 반복해서 만들어주는 객체를 말한다.<br>자바에서는 Supplier&lt;T&gt;가 해당한다.</p><p>위처럼 생성자(정적 팩토리 메서드나 빌더)에 팩토리를 넘겨받으면 다음같이 활용 가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpellChecker englishChecker = <span class="keyword">new</span> SpellChecker(() -&gt; <span class="keyword">new</span> Dictionary(Language.ENGLISH));       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/effective-java/">Effective Java</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/03/04/java/effective-java/effective5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>인스턴스화를 막으려거든 private 생성자를 사용해라</title>
      <link>https://yangdongjue5510.github.io/2022/03/04/java/effective-java/effective4/</link>
      <guid>https://yangdongjue5510.github.io/2022/03/04/java/effective-java/effective4/</guid>
      <pubDate>Thu, 03 Mar 2022 15:04:59 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;인스턴스화하지-않으려는-클래스&quot;&gt;&lt;a href=&quot;#인스턴스화하지-않으려는-클래스&quot; class=&quot;headerlink&quot; title=&quot;인스턴스화하지 않으려는 클래스?&quot;&gt;&lt;/a&gt;인스턴스화하지 않으려는 클래스?&lt;/h3&gt;&lt;p&gt;객체지향적이지 않지만 </description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="인스턴스화하지-않으려는-클래스"><a href="#인스턴스화하지-않으려는-클래스" class="headerlink" title="인스턴스화하지 않으려는 클래스?"></a>인스턴스화하지 않으려는 클래스?</h3><p>객체지향적이지 않지만 필요할 때가 있다.<br>java.lang.Math, java.util.Array 같이 기본 타입 값이나 배열 관련 메서드를 모아둔 곳<br>java.util.Collections와 같이 특정 인터페이스를 구현한 객체를 생성하는 정적 메서드를 모아둔 곳.<br>final 클래스와 관련된 메서드를 모아놓을 때. (final 클래스를 상속해서 하위 클래스에 메서드를 못넣음)</p><h3 id="인스턴스화-하지-않으려면-private-생성자를-사용"><a href="#인스턴스화-하지-않으려면-private-생성자를-사용" class="headerlink" title="인스턴스화 하지 않으려면 private 생성자를 사용"></a>인스턴스화 하지 않으려면 private 생성자를 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInstance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NotInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>private로 기본 생성자를 해놓으면 외부에서 인스턴스화를 막을 수 있다.<br>Private 기본 생성자를 해놓으면 컴파일러가 기본 생성자를 자동으로 만들지 않기 때문이다.</p><p>Private 기본 생성자는 상속도 못하게 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> <span class="keyword">extends</span> <span class="title">Instance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomeClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//super(); 가 생략되어 있음. </span></span><br><span class="line"><span class="comment">//부모 객체의 생성자가 private면 이 과정이 안되니 상속이 안된다.      </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>추상 클래스의 위험성</p></blockquote><p>추상 클래스 그 자체는 인스턴스화할 수 없다.</p><p>하지만, 추상 클래스는 상속한 클래스를 통해 인스턴스화 할 수 있다.<br>게다가 사용자가 추상 클래스를 보면 인스턴스화 하지 말라고 이해하지 않고, 상속받아서 사용하라고 이해하기 때문에 더 위험하다.</p>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/effective-java/">Effective Java</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/03/04/java/effective-java/effective4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자바 제네릭과 와일드카드 튜토리얼</title>
      <link>https://yangdongjue5510.github.io/2022/02/25/java/java-basic/post-1/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/25/java/java-basic/post-1/</guid>
      <pubDate>Fri, 25 Feb 2022 07:26:32 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;본 포스트는 오라클 자바 튜토리얼 제네릭 부분을 공부한 내용을 적은 포스트이다.&lt;br&gt;JDK 8 기반으로 작성됐다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>본 포스트는 오라클 자바 튜토리얼 제네릭 부분을 공부한 내용을 적은 포스트이다.<br>JDK 8 기반으로 작성됐다.</p><p><a href="https://docs.oracle.com/javase/tutorial/java/generics/why.html">https://docs.oracle.com/javase/tutorial/java/generics/why.html</a></p><h2 id="제네릭은-왜-쓰는가"><a href="#제네릭은-왜-쓰는가" class="headerlink" title="제네릭은 왜 쓰는가"></a>제네릭은 왜 쓰는가</h2><p>제네릭은 클래스, 인터페이스, 메서드를 선언할 때 타입(클래스, 인터페이스)도 매개변수로 만들 수 있다.<br>전통적인 매개변수와 마찬가지로 타입 매개변수도 다양한 인풋을 받을 수 있게한다.</p><ol><li><p>타입 체크를 컴파일 타임에 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//정수를 리스트에 담아서 사용하려고 했는데 실수로 문자열을 넣는 상황</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//제네릭이 아닌 경우</span></span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>); <span class="comment">//컴파일 에러가 발생하지 않는다.</span></span><br><span class="line"><span class="keyword">int</span> hello = (<span class="keyword">int</span>) list.get(<span class="number">0</span>); <span class="comment">//나중에 실행하면 여기서 ClassCastException이 발생한다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//제네릭인 경우</span></span><br><span class="line">List&lt;Integer&gt; genericList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">genericList.add(<span class="string">&quot;hello&quot;</span>); <span class="comment">//컴파일 에러</span></span><br></pre></td></tr></table></figure></li><li><p>캐스팅 할 필요 없어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//제네릭 없는 경우</span></span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;하이&quot;</span>);</span><br><span class="line">String hi = (String) list.get(<span class="number">0</span>); <span class="comment">//제네릭을 전달하지 않으면 Object를 반환</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">stringList.add(<span class="string">&quot;하이&quot;</span>);</span><br><span class="line">String hello = list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="제네릭-간단하게-사용해보자"><a href="#제네릭-간단하게-사용해보자" class="headerlink" title="제네릭 간단하게 사용해보자"></a>제네릭 간단하게 사용해보자</h2><p>아무 타입이나 저장할 수 있는 Box 클래스를 구현하고자 한다.<br>제네릭 없이 구현하자면 다음과 같을 것 이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectBox</span> </span>&#123;</span><br><span class="line">        Object content;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 경우, get할 때마다 casting을 해줘야 된다.<br>그리고 담겨진 내용물을 잘못 파악해 casting해도 컴파일 타임에 알 수 없고 런타임 때 ClassCastException이 발생한다.</p><h4 id="제네릭을-사용"><a href="#제네릭을-사용" class="headerlink" title="제네릭을 사용"></a>제네릭을 사용</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericBox</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        T content;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(T content)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>제네릭을 사용하면 캐스팅이 필요없고 casting도 필요 없다.</p><h4 id="타입-파라미터-네이밍-컨벤션"><a href="#타입-파라미터-네이밍-컨벤션" class="headerlink" title="타입 파라미터 네이밍 컨벤션"></a>타입 파라미터 네이밍 컨벤션</h4><p>위에서 T는 타입 파라미터라고 한다.</p><ul><li>E - Element</li><li>K - Key</li><li>N - Number</li><li>T - Type</li><li>V - Value</li><li>S, U, V - 2, 3, 4번째 타입</li></ul><p>이렇게 지칭한다.</p><h4 id="제네릭-타입-인보킹과-인스턴스화"><a href="#제네릭-타입-인보킹과-인스턴스화" class="headerlink" title="제네릭 타입 인보킹과 인스턴스화"></a>제네릭 타입 인보킹과 인스턴스화</h4><p>제네릭 타입 인보킹은 위에서 적은 T와 같은 매개변수를 우리가 의도한 실제 타입으로 변환하는 행위를 말한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box&lt;Integer&gt; integerBox;</span><br></pre></td></tr></table></figure><p>참조변수를 통해 타입 인보킹을 해줄 수 있다.<br>이때 조심해야 할 것은 T는 타입 매개변수이고, Integer는 타입인자이다. 이 두가지는 다르다.</p><p>제네릭을 사용하는 클래스를 인스턴스화하려면 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//타입 추론도 된다.</span></span><br><span class="line">Box&lt;Integer&gt; integerBox2 = <span class="keyword">new</span> Box&lt;&gt;();</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/java/java-basic/">Java Basic</category>
      
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/25/java/java-basic/post-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Enum에서 메서드 참조와 BiFunction 사용하기</title>
      <link>https://yangdongjue5510.github.io/2022/02/24/java/woowa-tech-course/post-2/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/24/java/woowa-tech-course/post-2/</guid>
      <pubDate>Thu, 24 Feb 2022 14:12:58 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;int matchCount와 boolean bonusMatch를 BiFunction를 통해 해당 Enum 객체를 찾을 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;문제 배경 (안</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>int matchCount와 boolean bonusMatch를 BiFunction를 통해 해당 Enum 객체를 찾을 수 있다.</p><blockquote><p>문제 배경 (안좋은 사례 모음)</p></blockquote><p>로또 순위를 Enum LottoRank로 등수와 상금을 관리하고자 한다.<br>LottoRank가 맞춘 번호 갯수와 보너스 번호 맞춤여부를 전달받아 등수를 판별해야 한다.</p><ol><li><p>LottoRank에 맞춘 번호 갯수와 보너스 번호 맞춤여부를 추가로 저장하면 된다?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LottoRank</span> </span>&#123;</span><br><span class="line">    FIRST(<span class="keyword">new</span> Money(<span class="number">2_000_000_000</span>), <span class="number">6</span>, <span class="keyword">false</span>),</span><br><span class="line">    SECOND(<span class="keyword">new</span> Money(<span class="number">30_000_000</span>),<span class="number">5</span>, <span class="keyword">true</span>),</span><br><span class="line">    THIRD(<span class="keyword">new</span> Money(<span class="number">1_500_000</span>), <span class="number">5</span>, <span class="keyword">false</span>),</span><br><span class="line">    FOURTH(<span class="keyword">new</span> Money(<span class="number">50_000</span>), <span class="number">4</span>, <span class="keyword">false</span>),</span><br><span class="line">    FIFTH(<span class="keyword">new</span> Money(<span class="number">5_000</span>), <span class="number">3</span>, <span class="keyword">false</span>),</span><br><span class="line">    NOTHING(Money.ZERO, <span class="number">2</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//이하 생략...</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>그런데 문제가 있다. 4등, 5등은 보너스 맞춤여부가 false이든 true이든 상관없이 맞춘 갯수만 중요하다.<br>그리고 꽝인 경우, 맞춘 갯수가 2개 뿐만 아니라 1개, 0개여도 꽝이다. 그리고 꽝도 4등 5등의 경우와 마찬가지로 보너스 맞춤여부가 상관없다.<br>이런 경우도 전부 알맞은 상금을 가진 열거형 객체를 반환해줘야 한다.</p></li><li><p>좀 더 순위가 나오는 경우를 구체화한다?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LottoRank</span> </span>&#123;</span><br><span class="line">    FIRST(<span class="keyword">new</span> Money(<span class="number">2_000_000_000</span>), <span class="number">6</span>, <span class="keyword">false</span>),</span><br><span class="line">    SECOND(<span class="keyword">new</span> Money(<span class="number">30_000_000</span>),<span class="number">5</span>, <span class="keyword">true</span>),</span><br><span class="line">    THIRD(<span class="keyword">new</span> Money(<span class="number">1_500_000</span>), <span class="number">5</span>, <span class="keyword">false</span>),</span><br><span class="line">    FOURTH(<span class="keyword">new</span> Money(<span class="number">50_000</span>), <span class="number">4</span>, <span class="keyword">false</span>),</span><br><span class="line">    FOURTH_WITH_BONUS(<span class="keyword">new</span> Money(<span class="number">50_000</span>), <span class="number">4</span>, <span class="keyword">true</span>),</span><br><span class="line">    FIFTH(<span class="keyword">new</span> Money(<span class="number">5_000</span>), <span class="number">3</span>, <span class="keyword">false</span>),</span><br><span class="line">    FIFTH_WITH_BONUS(<span class="keyword">new</span> Money(<span class="number">5_000</span>), <span class="number">3</span>, <span class="keyword">true</span>),</span><br><span class="line">    NOTHING_TWO(Money.ZERO, <span class="number">2</span>, <span class="keyword">false</span>);</span><br><span class="line">    NOTHING_TWO_WITH_BONUS(Money.ZERO, <span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line">    NOTHING_ONE(Money.ZERO, <span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">    NOTHING_ONE_WITH_BONUS(Money.ZERO, <span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">    NOTHING_(Money.ZERO, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">    NOTHING_WITH_BONUS(Money.ZERO, <span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//이하 생략...</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>음…이렇게 하면 당연히 안된다!!!!!!!<br>물론 보너스 번호 일치여부를 또 다른 열거형으로 도입하면 보너스 맞춤여부가 상관없는 경우 BONUS_MATCH.NOT_NEED 이런 식으로 처리하면 되긴 할 것이다.<br>그렇지만 NOTHING의 맞춘 갯수가 0 ~ 2개를 모두 적용되어야 된다.</p></li></ol><h3 id="BiFunction-도입하기"><a href="#BiFunction-도입하기" class="headerlink" title="BiFunction 도입하기"></a>BiFunction 도입하기</h3><p>이제 생각을 좀 바꿔보자.<br>열거형 객체가 순위를 정하는 기준을 메서드참조로 저장하고 있다면 어떨까?</p><h4 id="1-일단-등수를-구별하는-기준을-메서드로-만들어주자"><a href="#1-일단-등수를-구별하는-기준을-메서드로-만들어주자" class="headerlink" title="1. 일단 등수를 구별하는 기준을 메서드로 만들어주자"></a>1. 일단 등수를 구별하는 기준을 메서드로 만들어주자</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LottoRank</span> </span>&#123;</span><br><span class="line">    <span class="comment">//생략...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFirstPrize</span><span class="params">(Integer matchCount, <span class="keyword">boolean</span> bonusMatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> matchCount == <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSecondPrize</span><span class="params">(Integer matchCount, <span class="keyword">boolean</span> bonusMatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> matchCount == <span class="number">5</span> &amp;&amp; bonusMatch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isThirdPrize</span><span class="params">(Integer matchCount, <span class="keyword">boolean</span> bonusMatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> matchCount == <span class="number">5</span> &amp;&amp; !bonusMatch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFourthPrize</span><span class="params">(Integer matchCount, <span class="keyword">boolean</span> bonusMatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> matchCount == <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFifthPrize</span><span class="params">(Integer matchCount, <span class="keyword">boolean</span> bonusMatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> matchCount == <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNothingPrize</span><span class="params">(Integer matchCount, <span class="keyword">boolean</span> bonusMatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &lt;= matchCount &amp;&amp; matchCount &lt; <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 각 등수를 구분하는 기준을 정해준다.<br>물론 bonusMatch를 사용하지 않는 경우도 있다. 하지만 나중에 메서드 참조를 위해서 넣어줬다.</p><h4 id="2-BiFunction을-메서드-참조를-통해-열거형의-필드로-보내준다"><a href="#2-BiFunction을-메서드-참조를-통해-열거형의-필드로-보내준다" class="headerlink" title="2. BiFunction을 메서드 참조를 통해 열거형의 필드로 보내준다."></a>2. BiFunction을 메서드 참조를 통해 열거형의 필드로 보내준다.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LottoRank</span> </span>&#123;</span><br><span class="line">    FIRST(<span class="keyword">new</span> Money(<span class="number">2_000_000_000</span>), LottoRank::isFirstPrize),</span><br><span class="line">    SECOND(<span class="keyword">new</span> Money(<span class="number">30_000_000</span>), LottoRank::isSecondPrize),</span><br><span class="line">    THIRD(<span class="keyword">new</span> Money(<span class="number">1_500_000</span>), LottoRank::isThirdPrize),</span><br><span class="line">    FOURTH(<span class="keyword">new</span> Money(<span class="number">50_000</span>), LottoRank::isFourthPrize),</span><br><span class="line">    FIFTH(<span class="keyword">new</span> Money(<span class="number">5_000</span>), LottoRank::isFifthPrize),</span><br><span class="line">    NOTHING(Money.ZERO, LottoRank::isNothingPrize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Money prize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BiFunction&lt;Integer, Boolean, Boolean&gt; predicate;</span><br><span class="line"></span><br><span class="line">    LottoRank(Money prize, BiFunction&lt;Integer, Boolean, Boolean&gt; predicate) &#123;</span><br><span class="line">        <span class="keyword">this</span>.prize = prize;</span><br><span class="line">        <span class="keyword">this</span>.predicate = predicate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 이하 생략</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>두가지 객체를 받아서 한가지로 결과를 반환하는 BiFunction 인터페이스를 필드로 가지고, 생성자로 초기화해주자.<br>그리고 우리가 만들었던 메서드들이 메서드 참조로 BiFunction을 구현하게 된다!!</p><h4 id="3-각-객체의-BiFunction을-통해-적절한-순위-객체를-반환한다"><a href="#3-각-객체의-BiFunction을-통해-적절한-순위-객체를-반환한다" class="headerlink" title="3. 각 객체의 BiFunction을 통해 적절한 순위 객체를 반환한다."></a>3. 각 객체의 BiFunction을 통해 적절한 순위 객체를 반환한다.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LottoRank</span> </span>&#123;</span><br><span class="line">    <span class="comment">//열거형의 필드와 생성자는 위에 나와있으니 생략.</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LottoRank <span class="title">of</span><span class="params">(Integer matchCount, <span class="keyword">boolean</span> bonusMatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(values())</span><br><span class="line">                .filter(rank -&gt; rank.isMatched(matchCount, bonusMatch))</span><br><span class="line">                .findFirst()</span><br><span class="line">                .orElseThrow(InvalidMatchCountException::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//등수 기준 구현 메서드는 위에 나와있으니 생략.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMatched</span><span class="params">(<span class="keyword">int</span> matchCount, <span class="keyword">boolean</span> bonusMatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> predicate.apply(matchCount, bonusMatch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> LottoRank의 모든 객체들을 순회하면서 그 객체의 BiFunction에 판별에 필요한 정보를 전달해줘서 적절한 순위를 찾아낸다!</p>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/24/java/woowa-tech-course/post-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Junit으로 parameterized test</title>
      <link>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/post-1/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/post-1/</guid>
      <pubDate>Mon, 21 Feb 2022 12:16:22 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@ParameterizedTest 어노테이션과 함께 @MethodSorce나 @ValueSource를 통해 한 테스트 메서드에 여러번 파라미터를 넘길 수 있다.&lt;/p&gt;
&lt;h3 id</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>@ParameterizedTest 어노테이션과 함께 @MethodSorce나 @ValueSource를 통해 한 테스트 메서드에 여러번 파라미터를 넘길 수 있다.</p><h3 id="MethodSource"><a href="#MethodSource" class="headerlink" title="@MethodSource"></a>@MethodSource</h3><blockquote><p>도입 배경</p></blockquote><p>자동차 이름의 글자 갯수가 5개 이하여야 하고, 자동차 이름이 빈 문자열이면 안되고 등등 다양한 제약 사항을 테스트해보고 싶다고 하자.<br>근데 테스트 코드를 작성하다보니 다음과 같이 메서드가 비슷비슷하게 나올 때 이를 리팩토링해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;NonAsciiCharacters&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarNameTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 자동차_이름_글자수_테스트() &#123;</span><br><span class="line">        assertThatThrownBy(() -&gt; <span class="keyword">new</span> CarName(<span class="string">&quot;다섯글자이상&quot;</span>))</span><br><span class="line">                .isInstanceOf(RuntimeException.class)</span><br><span class="line">                .hasMessageContaining(<span class="string">&quot;자동차 이름은 5자 이하여야 합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 자동차_이름이_존재하지_않는_경우_테스트() &#123;</span><br><span class="line">        assertThatThrownBy(() -&gt; <span class="keyword">new</span> CarName(<span class="string">&quot;&quot;</span>))</span><br><span class="line">                .isInstanceOf(RuntimeException.class)</span><br><span class="line">                .hasMessageContaining(<span class="string">&quot;모든 자동차 이름은 반드시 존재해야 합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 등등...</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><blockquote><p>해결하기</p></blockquote><p>주목할 점은 한 테스트 메서드에 여러개의 인자를 여러 케이스로 보낼 수 있다는 점이다!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarNameTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Stream&lt;Arguments&gt; <span class="title">provideCarNameAndExceptionMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(</span><br><span class="line">                Arguments.of(<span class="keyword">null</span>, <span class="string">&quot;자동차 이름을 찾을 수 없습니다!&quot;</span>),</span><br><span class="line">                Arguments.of(<span class="string">&quot;다섯글자이상&quot;</span>, <span class="string">&quot;자동차 이름은 5자 이하여야 합니다.&quot;</span>),</span><br><span class="line">                Arguments.of(<span class="string">&quot;&quot;</span>, <span class="string">&quot;모든 자동차 이름은 반드시 존재해야 합니다.&quot;</span>),</span><br><span class="line">                Arguments.of(<span class="string">&quot; &quot;</span>, <span class="string">&quot;자동차 이름은 공백으로 설정할 수 없습니다.&quot;</span>),</span><br><span class="line">                Arguments.of(<span class="string">&quot;    &quot;</span>, <span class="string">&quot;자동차 이름은 공백으로 설정할 수 없습니다.&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(value = &quot;provideCarNameAndExceptionMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 자동차_이름_예외_테스트(String carName, String message) &#123;</span><br><span class="line">        assertThatThrownBy(() -&gt; <span class="keyword">new</span> CarName(carName))</span><br><span class="line">                .isInstanceOf(CarNameException.class)</span><br><span class="line">                .hasMessageContaining(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음같이 @ParameterizedTest해서 @MethodSource로 해결할 수 있다!</p><h3 id="ValueSource"><a href="#ValueSource" class="headerlink" title="@ValueSource"></a>@ValueSource</h3><blockquote><p>도입 배경</p></blockquote><p>한가지 메서드에 여러가지 경우의 수를 넣어 실험하고 싶은데 어떻게 할까?<br>예를 들어 자동차 이름에 여러가지 이름을 넣어보고 실제로 들어갔는지 테스트해보고 싶으면 어떻게 할지 고민해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 자동차_이름_테스트() &#123;</span><br><span class="line">  Car klayCar = <span class="keyword">new</span> Car(<span class="string">&quot;klay&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  assertThat(klayCar.getName()).isEqualTo(<span class="string">&quot;klay&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Car eveCar = <span class="keyword">new</span> Car(<span class="string">&quot;eve&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  assertThat(eveCar.getName()).isEqualTo(<span class="string">&quot;eve&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Car pobiCar = <span class="keyword">new</span> Car(<span class="string">&quot;pobi&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  assertThat(pobiCar.getName()).isEqualTo(<span class="string">&quot;pobi&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 무식하게 하면 당연히 뚜들겨 맞는다.</p><blockquote><p>해결하기</p></blockquote><p>주목할점은 전달될 인자의 자료형에 따라 strings, ints 등 필드값을 바꿔주면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;클레이&quot;, &quot;이브&quot;, &quot;포비&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 자동차_이름_테스트(String carName) &#123;</span><br><span class="line">  Car car = <span class="keyword">new</span> Car(carName, <span class="number">0</span>);</span><br><span class="line">  assertThat(car.getName()).isEqualTo(carName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>더 알아보기</p></blockquote><p><a href="https://www.baeldung.com/parameterized-tests-junit-5">https://www.baeldung.com/parameterized-tests-junit-5</a></p><p><a href="https://www.arhohuttunen.com/junit-5-parameterized-tests/">https://www.arhohuttunen.com/junit-5-parameterized-tests/</a></p>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/post-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>우아한테크코스 자동차 경주 미션 회고</title>
      <link>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/post/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/post/</guid>
      <pubDate>Mon, 21 Feb 2022 09:37:50 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;아직도 내가 모르는 게 이렇게 많다니. 우테코 첫 미션을 하면서 배운 것도 많지만 그보다 더 많이 내가 모르고 있다는 걸 알게됐다.&lt;br&gt;같이 공부하는 크루들도 출중한 사람이 엄청 많았다. 그에 비하면 내 코드는 뭐… 바보 같을 때가 많았다.&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<p>아직도 내가 모르는 게 이렇게 많다니. 우테코 첫 미션을 하면서 배운 것도 많지만 그보다 더 많이 내가 모르고 있다는 걸 알게됐다.<br>같이 공부하는 크루들도 출중한 사람이 엄청 많았다. 그에 비하면 내 코드는 뭐… 바보 같을 때가 많았다.</p><p>페어 프로그래밍으로 같이 하면서, 처음엔 나 혼자하는게 더 빠르지 않을까 싶기도 했었는데,<br>같이하는 페어의 독특한 생각을 많이 느낄 수 있어서 나 혼자하는 것보다 더 괜찮은 결과물을 얻을 수 있었던 것 같다.</p><p>미션을 마무리한 날, 같은 데일리 미팅 크루들과 자신의 코드를 설명하는 시간을 가졌다.<br>역시 각 크루들의 코드가 나와 다른 부분도 많았는데, 그 부분을 잘 설득하는 크루를 보며 감탄했다.<br>반면 나는 아직 설명도 제대로 못하고, 내가 왜 그렇게 짰는지 설득도 잘 못하는 것 같아 아쉽다…!</p><p>부족한 게 많으면 나아질 부분도 많다는 뜻. 이제 더 열심히 공부해서 다른 크루에게 도움이 되는 크루가 되자.</p>]]></content:encoded>
      
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/post/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자바의 예외 Throwable, Error, Exception</title>
      <link>https://yangdongjue5510.github.io/2022/02/21/java/java-basic/java-exception/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/21/java/java-basic/java-exception/</guid>
      <pubDate>Mon, 21 Feb 2022 01:34:05 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Throwable -&amp;gt; Exception -&amp;gt; RuntimeException 등 다양한 예외&lt;br&gt;Throwable은 stackTrace 생성 등 예외에 필요한 다양한 </description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>Throwable -&gt; Exception -&gt; RuntimeException 등 다양한 예외<br>Throwable은 stackTrace 생성 등 예외에 필요한 다양한 일을 함<br>Exception은 예외 메시지를 받아 초기화할 수 있다<br>RuntimeException은 치명적이진 않은 예외를 뜻함.<br>RuntimeException은 치명적일 수 있는 에외로 반드시 처리를 해줘야 함.</p><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>모든 에러와 예외의 부모 클래스다.<br>Throwable의 인스턴스만 JVM이나 throw 키워드를 통해 예외나 에러를 thrown 될 수 있다.<br>마찬가지로 catch문에 Throwable의 인스턴스만 올 수 있다.</p><p>Throwable 객체는 생성될 때 해당 예외가 발생하던 수행 스택의 스냅샷을 가지게 된다.<br>또한 다른 Throwable에 의해 생성된 경우 cause를 통해 알 수 있다.<br>cause는 상위 Exception가 throw 될 때 굳이 하위 레이어의 내용까지 전파하지 않기 위함이다.</p><p>사실 개발하는 입장에서는 자주 사용하진 않는다.</p><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>Throwable을 상속받는 클래스로,<br>Try catch로 처리되어선 안될 정도로 심각한 문제를 일으킬 수 있는 문제들을 Error 클래스로 표현한다.<br>일반적으로 비정상적인 상태를 나타낼 때 주로 사용된다.</p><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>Throwable을 상속받는 클래스로,<br>Try catch 되어야할 이유가 있는 문제들을 Exception으로 표현한다.<br>이때 Checked Exception과 RuntimeException 두가지로 구분된다.</p><p>Checked Exception은 반드시 try catch 되거나 throws 되어야 컴파일 되는 예외이다.<br>RuntimeException은 try catch 되거나 throws 되지 않아도 되는 예외이다.</p>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/java/java-basic/">Java Basic</category>
      
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/21/java/java-basic/java-exception/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자바 사용자 정의 예외 만들기</title>
      <link>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/java-custom-exception/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/java-custom-exception/</guid>
      <pubDate>Sun, 20 Feb 2022 23:37:58 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;예외를 상속하는 클래스를 통해 예외를 만들 수 있다.&lt;br&gt;생성자를 통해 에러 메시지를 초기화 할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;배경&lt;/p&gt;
&lt;/blockquote</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>예외를 상속하는 클래스를 통해 예외를 만들 수 있다.<br>생성자를 통해 에러 메시지를 초기화 할 수 있다.</p><blockquote><p>배경</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkCarNameEmpty</span><span class="params">(String carName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (carName == <span class="keyword">null</span> || carName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;자동차 이름이 입력되지 않았습니다!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음같이 작성하면 자동차 이름이 빈 문자열이거나 null인 경우 런타임예외를 발생시킨다.</p><p>RuntimeException은 너무 포괄적인 의미이니 도메인에 적합한 예외를 만들어보자.</p><h3 id="예외-클래스-만들기"><a href="#예외-클래스-만들기" class="headerlink" title="예외 클래스 만들기"></a>예외 클래스 만들기</h3><h4 id="1-생성자를-그대로-사용하기"><a href="#1-생성자를-그대로-사용하기" class="headerlink" title="1. 생성자를 그대로 사용하기"></a>1. 생성자를 그대로 사용하기</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyCarNameException</span> <span class="keyword">extends</span> <span class="title">RuntimeExecption</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">EmptyCarNameException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">EmptyCarNameException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">EmptyCarNameException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 식으로 예외를 상속한 클래스를 만들고, 생성자들을 만들면 커스텀 예외로 활용할 수 있다.</p><h4 id="2-좀-더-활용하기"><a href="#2-좀-더-활용하기" class="headerlink" title="2. 좀 더 활용하기"></a>2. 좀 더 활용하기</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarNameException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarNameException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>먼저 자동차 이름에 관련된 예외들이 모두 상속하는 수퍼클래스를 만들었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyCarNameException</span> <span class="keyword">extends</span> <span class="title">CarNameException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyCarNameException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;빈 문자열을 자동차 이름으로 입력할 수 없습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자동차 이름 예외를 상속받도록 하였고,<br>이미 특정 도메인 상황을 예외로 만들고 싶어서 사용자 정의 예외를 만들었기 때문에, 굳이 매번 에러메시지를 입력받아 생성할 필요가 없다고 생각했다.<br>그래서 예외 클래스에 정해진 에러 메시지로 초기화하도록 만들었다.</p><h3 id="실제-코드에-적용시켜보기"><a href="#실제-코드에-적용시켜보기" class="headerlink" title="실제 코드에 적용시켜보기"></a>실제 코드에 적용시켜보기</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarName</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_CAR_NAME_LENGTH = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String EMPTY_STRING = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String carName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarName</span><span class="params">(String carName)</span> </span>&#123;</span><br><span class="line">        checkCarName(carName);</span><br><span class="line">        <span class="keyword">this</span>.carName = carName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkCarName</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        checkCarNameNotNull(input);</span><br><span class="line">        checkCarNameLength(input);</span><br><span class="line">        checkCarNameExists(input);</span><br><span class="line">        checkCarNameIsNotSpace(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkCarNameNotNull</span><span class="params">(String carName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (carName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CarNameNullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkCarNameLength</span><span class="params">(String carName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (carName.length() &gt; MAX_CAR_NAME_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CarNameLengthOverException(carName.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkCarNameExists</span><span class="params">(String carName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (carName.equals(EMPTY_STRING)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CarNameNotExistsException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkCarNameIsNotSpace</span><span class="params">(String carName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (carName.trim().equals(EMPTY_STRING)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CarNameSpaceException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 도메인에서 우리가 만든 사용자 예외를 검증해보자.<br>도메인 객체가 만들어지기 전에 예외를 모두 검증한다.</p><h3 id="테스트해보기"><a href="#테스트해보기" class="headerlink" title="테스트해보기"></a>테스트해보기</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarNameTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Stream&lt;Arguments&gt; <span class="title">provideCarNameAndExceptionMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(</span><br><span class="line">                Arguments.of(<span class="keyword">null</span>, <span class="string">&quot;자동차 이름을 찾을 수 없습니다!&quot;</span>),</span><br><span class="line">                Arguments.of(<span class="string">&quot;다섯글자이상&quot;</span>, <span class="string">&quot;자동차 이름은 5자 이하여야 합니다.&quot;</span>),</span><br><span class="line">                Arguments.of(<span class="string">&quot;&quot;</span>, <span class="string">&quot;모든 자동차 이름은 반드시 존재해야 합니다.&quot;</span>),</span><br><span class="line">                Arguments.of(<span class="string">&quot; &quot;</span>, <span class="string">&quot;자동차 이름은 공백으로 설정할 수 없습니다.&quot;</span>),</span><br><span class="line">                Arguments.of(<span class="string">&quot;    &quot;</span>, <span class="string">&quot;자동차 이름은 공백으로 설정할 수 없습니다.&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(value = &quot;provideCarNameAndExceptionMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 자동차_이릅_예외_테스트(String carName, String message) &#123;</span><br><span class="line">        assertThatThrownBy(() -&gt; <span class="keyword">new</span> CarName(carName))</span><br><span class="line">                .isInstanceOf(CarNameException.class)</span><br><span class="line">                .hasMessageContaining(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다양한 예외 상황마다 예외 객체와 예외 메시지를 통해 테스트를 할 수 있다!</p><h3 id="사용자-예외의-장단점"><a href="#사용자-예외의-장단점" class="headerlink" title="사용자 예외의 장단점"></a>사용자 예외의 장단점</h3><h4 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h4><ol><li><p>클래스의 이름으로 어떤 예외인지 가늠가능하다.</p><p>CarNameEmtpyException이면 어떤 상황인지 바로 이해가능하다!</p></li><li><p>상세한 예외 정보를 제공할 수 있다.</p><p>자동차의 이름 길이가 5를 넘기면 예외를 발생시키고자 한다. 이때 사용자가 입력한 이름의 길이도 함께 알려주고 싶다면?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarNameLengthOverException</span> <span class="keyword">extends</span> <span class="title">CarNameException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarNameLengthOverException</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;자동차 이름은 5자 이하여야 합니다. 입력된 글자 수 : &quot;</span> + length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>예외 핸들링이 용이하다.</p></li><li><p>해당 예외 상황에 관련된 정보를 한 곳에 관리 가능하다.</p></li></ol><h4 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h4><ol><li><p>새로운 클래스를 작성해줘야 된다.</p><p>굳이 이미 있는 예외 클래스로도 처리 가능한데, 굳이 새로운 클래스를 작성해야 될 지 고민해야한다.</p></li></ol>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/java/java-basic/">Java Basic</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/21/java/woowa-tech-course/java-custom-exception/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자바 일급 컬렉션 활용해보기</title>
      <link>https://yangdongjue5510.github.io/2022/02/16/java/woowa-tech-course/java-first-collection/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/16/java/woowa-tech-course/java-first-collection/</guid>
      <pubDate>Wed, 16 Feb 2022 12:10:39 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;일급 컬렉션은 컬렉션 객체를 감싸는 객체를 말한다.&lt;br&gt;일급 컬렉션은 객체를 만들 때 검증해야 할 로직을 모아 둘 수 있다.&lt;br&gt;일급 컬렉션은 해당 컬렉션이 행해야 할 책임을 </description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>일급 컬렉션은 컬렉션 객체를 감싸는 객체를 말한다.<br>일급 컬렉션은 객체를 만들 때 검증해야 할 로직을 모아 둘 수 있다.<br>일급 컬렉션은 해당 컬렉션이 행해야 할 책임을 모아 둘 수 있다.</p><p>불변성을 지키기 위해서는 </p><ol><li><p>setter 금지. </p></li><li><p>일급 컬렉션의 멤버 변수를 초기화할 때 가져온 인자를 새로운 주소값으로 재할당</p></li><li><p>getter 할 때 불변 객체 반환.</p></li></ol><h1 id="일급-컬렉션이란"><a href="#일급-컬렉션이란" class="headerlink" title="일급 컬렉션이란"></a>일급 컬렉션이란</h1><p>일급 컬렉션은 컬렉션 객체를 감싸는 객체다.<br>일급 컬렉션은 멤버 변수로 감싸고자 하는 컬렉션만 갖는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticipatedCars</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START_POSITION = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Car&gt; cars;</span><br><span class="line"></span><br><span class="line"><span class="comment">//이하 생략...  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="일급-컬렉션의-강점"><a href="#일급-컬렉션의-강점" class="headerlink" title="일급 컬렉션의 강점"></a>일급 컬렉션의 강점</h1><h4 id="1-일급-컬렉션은-해당-컬렉션의-검증-로직을-한-곳에-모을-수-있다"><a href="#1-일급-컬렉션은-해당-컬렉션의-검증-로직을-한-곳에-모을-수-있다" class="headerlink" title="1. 일급 컬렉션은 해당 컬렉션의 검증 로직을 한 곳에 모을 수 있다."></a>1. 일급 컬렉션은 해당 컬렉션의 검증 로직을 한 곳에 모을 수 있다.</h4><p>예를 들어 자동차 경주에 참가할 자동차 리스트를 관리한다고 가정하자.<br>이때 참가할 자동차들의 이름은 중복되면 안된다.</p><p>일급 컬렉션을 활용하면 참가할 자동차를 생성할 때 다음 같이 검증할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticipatedCars</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START_POSITION = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Car&gt; cars;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParticipatedCars</span><span class="params">(List&lt;String&gt; carNames)</span> </span>&#123;</span><br><span class="line">        checkCarNameDuplicated(carNames);</span><br><span class="line">        <span class="keyword">this</span>.cars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String carName : carNames) &#123;</span><br><span class="line">            cars.add(<span class="keyword">new</span> Car(carName, START_POSITION));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkCarNameDuplicated</span><span class="params">(List&lt;String&gt; carNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> count = carNames.stream().distinct().count();</span><br><span class="line">        <span class="keyword">if</span> (count != carNames.size()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CarNameDuplicationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//이하 생략...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 일급 컬렉션 객체의 생성자에 검증 로직을 넣어두면 참여중인 자동차 객체는 반드시 중복되지 않은 이름들을 가진다고 확신할 수 있다.</p><p>일급 컬렉션을 사용하지 않는다면 이런 검증 로직은 서비스 메서드로 처리하게 된다.<br>그러면 매번 참여중 인 자동차를 만들 때 마다 서비스 메서드를 호출해줘야 되는 번거로움이 생긴다.</p><h4 id="2-상태와-행동을-한-곳에서-관리-할-수-있다"><a href="#2-상태와-행동을-한-곳에서-관리-할-수-있다" class="headerlink" title="2. 상태와 행동을 한 곳에서 관리 할 수 있다."></a>2. 상태와 행동을 한 곳에서 관리 할 수 있다.</h4><p>참여한 자동차들은 모두 레이싱을 시도하는 역할을 할 수 있다.</p><p>다음 같이 일급 컬렉션에 행동을 추가해서 관리할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticipatedCars</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START_POSITION = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Car&gt; cars;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParticipatedCars</span><span class="params">(List&lt;String&gt; carNames)</span> </span>&#123;</span><br><span class="line">        checkCarNameDuplicated(carNames);</span><br><span class="line">        <span class="keyword">this</span>.cars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String carName : carNames) &#123;</span><br><span class="line">            cars.add(<span class="keyword">new</span> Car(carName, START_POSITION));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//생략...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCarRacing</span><span class="params">(RandomNumberGenerator randomNumberGenerator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Car car : cars) &#123;</span><br><span class="line">            car.tryToMoveBy(randomNumberGenerator);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>일급 컬렉션을 통해 이 객체가 어떤 행동을 하는지도 한눈에 볼 수 있게됐다.</p><h1 id="일급-컬렉션과-불변성"><a href="#일급-컬렉션과-불변성" class="headerlink" title="일급 컬렉션과 불변성"></a>일급 컬렉션과 불변성</h1><p>일급 컬렉션이 불변하다는 특징을 가졌다고 알려졌는데, 사실 그렇지 않을 수 있다는 포스트도 있다.</p><p><a href="https://tecoble.techcourse.co.kr/post/2020-05-08-First-Class-Collection/">관련 포스트</a></p><p>불변성을 지키고 싶다면 다음 세가지를 지켜주자</p><ol><li>setter를 사용하지 않는다.</li><li>일급 컬렉션의 멤버 변수를 초기화할 때 가져온 인자를 새로운 주소값으로 재할당하자.</li><li>getter를 할 때 불변한 콜렉션으로 반환하자.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticipatedCars</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START_POSITION = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Car&gt; cars;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParticipatedCars</span><span class="params">(List&lt;String&gt; carNames)</span> </span>&#123;</span><br><span class="line">        checkCarNameDuplicated(carNames);</span><br><span class="line">        <span class="keyword">this</span>.cars = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// &lt;- 새로운 주소가 할당된다.</span></span><br><span class="line">        <span class="keyword">for</span> (String carName : carNames) &#123;</span><br><span class="line">            cars.add(<span class="keyword">new</span> Car(carName, START_POSITION));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Car&gt; <span class="title">getCars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(<span class="keyword">this</span>.cars); <span class="comment">//&lt;- getter할 때 불변된 리스트가 반환된다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="여전히-궁금한-것들"><a href="#여전히-궁금한-것들" class="headerlink" title="여전히 궁금한 것들"></a>여전히 궁금한 것들</h3><ol><li>왜 일급 컬렉션은 </li></ol>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/java/java-basic/">Java Basic</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/16/java/woowa-tech-course/java-first-collection/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>구글 자바 컨벤션 및 우테코 컨벤션에서 자주 틀리는 내용 모음!</title>
      <link>https://yangdongjue5510.github.io/2022/02/15/java/woowa-tech-course/java-convention/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/15/java/woowa-tech-course/java-convention/</guid>
      <pubDate>Tue, 15 Feb 2022 14:42:53 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;static import를 하지 않는다.&lt;br&gt;구현 순서는 상수 -&amp;gt; 클래스 변수 -&amp;gt; 인스턴스 변수 -&amp;gt; 생성자 -&amp;gt; 메서드 순이다.&lt;br&gt;변수 이름에 자료</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>static import를 하지 않는다.<br>구현 순서는 상수 -&gt; 클래스 변수 -&gt; 인스턴스 변수 -&gt; 생성자 -&gt; 메서드 순이다.<br>변수 이름에 자료형을 사용하지 말라<br>인스턴스 변수의 수를 최소화 한다.<br>오버로드한 메서드(생성자)들 사이에 다른 코드를 넣지말라.<br>비할당 연산자에서 줄바꿈하는 경우, 기호 앞에서 끊어짐(. :: &lt;<del>&amp;</del>&gt; 등…)<br>할당 연산자에서 줄바꿈하는 경우 기호 뒤에서 끊어짐(사실 어느쪽도 허용)</p><h3 id="static-import-하지-않는다"><a href="#static-import-하지-않는다" class="headerlink" title="static import 하지 않는다"></a>static import 하지 않는다</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//안좋은 예시</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> somepackage.SomeClass.doMethod;</span><br><span class="line"><span class="keyword">import</span> otherpackage.OtherClass;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        doMethod();</span><br><span class="line">        OtherClass otherClass = <span class="keyword">new</span> OtherClass();</span><br><span class="line">        otherClass.doMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doMethod가 메서드가 두개다. 그래서 혼동이 온다.</p><h3 id="구현-순서는-상수-gt-클래스-변수-gt-인스턴스-변수-gt-생성자-gt-메서드-순"><a href="#구현-순서는-상수-gt-클래스-변수-gt-인스턴스-변수-gt-생성자-gt-메서드-순" class="headerlink" title="구현 순서는 상수 -&gt; 클래스 변수 -&gt; 인스턴스 변수 -&gt; 생성자 -&gt; 메서드 순"></a>구현 순서는 상수 -&gt; 클래스 변수 -&gt; 인스턴스 변수 -&gt; 생성자 -&gt; 메서드 순</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONSTANT_INT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> classVariable = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> instanceVariable = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SomeClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="변수-이름에-자료형을-사용하지-말라"><a href="#변수-이름에-자료형을-사용하지-말라" class="headerlink" title="변수 이름에 자료형을 사용하지 말라"></a>변수 이름에 자료형을 사용하지 말라</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//이런 변수이름들은 곤란하다.</span></span><br><span class="line">String carString = <span class="string">&quot;blah&quot;</span>;</span><br><span class="line">List&lt;Integer&gt; intList;</span><br></pre></td></tr></table></figure><h3 id="인스턴스-변수의-수를-최소화-한다"><a href="#인스턴스-변수의-수를-최소화-한다" class="headerlink" title="인스턴스 변수의 수를 최소화 한다."></a>인스턴스 변수의 수를 최소화 한다.</h3><h3 id="오버로드한-메서드-생성자-들-사이에-다른-코드를-넣지말라"><a href="#오버로드한-메서드-생성자-들-사이에-다른-코드를-넣지말라" class="headerlink" title="오버로드한 메서드(생성자)들 사이에 다른 코드를 넣지말라."></a>오버로드한 메서드(생성자)들 사이에 다른 코드를 넣지말라.</h3><h3 id="비할당-연산자에서-줄바꿈하는-경우-기호-앞에서-끊어짐-lt-amp-gt-등…"><a href="#비할당-연산자에서-줄바꿈하는-경우-기호-앞에서-끊어짐-lt-amp-gt-등…" class="headerlink" title="비할당 연산자에서 줄바꿈하는 경우, 기호 앞에서 끊어짐(. :: &lt;&amp;&gt; 등…)"></a>비할당 연산자에서 줄바꿈하는 경우, 기호 앞에서 끊어짐(. :: &lt;<del>&amp;</del>&gt; 등…)</h3><h3 id="할당-연산자에서-줄바꿈하는-경우-기호-뒤에서-끊어짐-사실-어느쪽도-허용"><a href="#할당-연산자에서-줄바꿈하는-경우-기호-뒤에서-끊어짐-사실-어느쪽도-허용" class="headerlink" title="할당 연산자에서 줄바꿈하는 경우 기호 뒤에서 끊어짐(사실 어느쪽도 허용)"></a>할당 연산자에서 줄바꿈하는 경우 기호 뒤에서 끊어짐(사실 어느쪽도 허용)</h3>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/java/java-basic/">Java Basic</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/15/java/woowa-tech-course/java-convention/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자바에서 정규 표현식 잘 활용하기</title>
      <link>https://yangdongjue5510.github.io/2022/02/09/java/woowa-tech-course/java-regex/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/09/java/woowa-tech-course/java-regex/</guid>
      <pubDate>Wed, 09 Feb 2022 14:45:29 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pattern 클래스와 Matcher 클래스를 활용해서 자바 정규 표현식을 잘 표현한다.&lt;/p&gt;
&lt;p&gt;특히 Matcher클래스에 정규 표현식을 compile(String)하고, m</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>Pattern 클래스와 Matcher 클래스를 활용해서 자바 정규 표현식을 잘 표현한다.</p><p>특히 Matcher클래스에 정규 표현식을 compile(String)하고, matcher(String)으로 대상 문자열을 전달해준다.<br>이때 find()메서드를 반드시 실행해줘야 정상적으로 Matcher 객체에 관련 내용이 할당된다!!</p><h1 id="Pattern-클래스로-정규-표현식-통과-여부-확인하기"><a href="#Pattern-클래스로-정규-표현식-통과-여부-확인하기" class="headerlink" title="Pattern 클래스로 정규 표현식 통과 여부 확인하기"></a>Pattern 클래스로 정규 표현식 통과 여부 확인하기</h1><p>주어진 문자열이 input이고, 정규식이 REGEX라는 변수에 할당됐을 때,<br>Pattern 클래스로 여부를 확인할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatches</span><span class="params">(String input)</span> </span>&#123;      </span><br><span class="line">    <span class="keyword">return</span> Pattern.matches(REGEX, input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Matcher-클래스로-정규-표현식에-해당하는-문자열-부분-가져오기"><a href="#Matcher-클래스로-정규-표현식에-해당하는-문자열-부분-가져오기" class="headerlink" title="Matcher 클래스로 정규 표현식에 해당하는 문자열 부분 가져오기"></a>Matcher 클래스로 정규 표현식에 해당하는 문자열 부분 가져오기</h1><p>Pattern 클래스로 정규 표현식을 compile 메서드로 넘겨주고, 검사할 문자열을 matcher 메서드로 전달해주면 해당 문자열에 대한 Matcher 객체를 생성할 수 있다.<br>이때 중요한 건! 해당 객체의 find 함수를 실행해야 group 메서드로 입력된 문자열 중 정규 표현식에 해당하는 부분을 가져올 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">findRegexPart</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    Matcher matcher = Pattern.compile(REGEX).matcher(input);</span><br><span class="line">    matcher.find();</span><br><span class="line">    <span class="keyword">return</span> matcher.group();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/java/java-basic/">Java Basic</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/09/java/woowa-tech-course/java-regex/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JPA에서 @Embedded로 복합키 매핑하기</title>
      <link>https://yangdongjue5510.github.io/2022/02/03/spring/JPA/compositekey/</link>
      <guid>https://yangdongjue5510.github.io/2022/02/03/spring/JPA/compositekey/</guid>
      <pubDate>Thu, 03 Feb 2022 08:11:16 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;@Embeddable를 붙인 복합키 클래스를 만든다&lt;/li&gt;
&lt;li&gt;엔티티 클래스에 @EmbeddedId를 통해 복합키 필드를 만든다.&lt;/li&gt;
&lt;li&gt;이때 엔티티 클래</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><ol><li>@Embeddable를 붙인 복합키 클래스를 만든다</li><li>엔티티 클래스에 @EmbeddedId를 통해 복합키 필드를 만든다.</li><li>이때 엔티티 클래스의 모든 매개변수를 받는 생성자를 만든다.<br>이때 복합키 필드는 new로 객체를 초기화해준다.</li></ol><h1 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h1><p>챌린지 테이블과 태그 테이블이 다대다 관계인 상황이다.<br>이때 태그 테이블은 이름이 기본키이고, 챌린지 테이블은 챌린지 ID가 기본키로 가진다.</p><p>우리는 챌린지 테이블과 태그 테이블 사이에 매핑 테이블을 도입해서 다대일 관계 두 개로 분리해서 사용하기로 했다.<br>챌린지 -(일대다)- 매핑 테이블 -(다대일)- 태그</p><p>이때 매핑 테이블은 기본키로 태그의 이름과 챌린지의 챌린지아이디를 가진다.(즉 복합키이다.)<br>이를 어떻게 JPA로 표현할까?</p><h1 id="관련-코드"><a href="#관련-코드" class="headerlink" title="관련 코드"></a>관련 코드</h1><blockquote><p>해결방법</p></blockquote><p>@EmbeddedId를 도입해서 복합키를 모은 클래스를 따로 만들어서 해결한다.</p><h2 id="ChallengeTag-매핑-테이블"><a href="#ChallengeTag-매핑-테이블" class="headerlink" title="ChallengeTag(매핑 테이블)"></a>ChallengeTag(매핑 테이블)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChallengeTag</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EmbeddedId</span></span><br><span class="line">    <span class="keyword">private</span> ChallengeTagPK challengeTagPK;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;challenge_id&quot;, nullable = false, insertable = false, foreignKey = @ForeignKey(ConstraintMode.CONSTRAINT))</span></span><br><span class="line">    <span class="meta">@MapsId(&quot;challengeId&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Challenge challenge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;name&quot;, nullable = false, insertable = false, foreignKey = @ForeignKey(ConstraintMode.CONSTRAINT))</span></span><br><span class="line">    <span class="meta">@MapsId(&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Tag tag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChallengeTag</span><span class="params">(ChallengeTagPK challengeTagPK, Challenge challenge, Tag tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.challengeTagPK = <span class="keyword">new</span> ChallengeTagPK();</span><br><span class="line">        <span class="keyword">this</span>.challenge = challenge;</span><br><span class="line">        <span class="keyword">this</span>.tag = tag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChallengeTagPK라는 필드를 만들어서 @EmbeddedId를 붙여줬다. 이러면 기본키를 복합키를 필드로 가지는 객체로 설정 할 수 있다.</p><p>이때 주의할 점 몇가지 알아보자.</p><h3 id="1-복합키에-따른-객체를-선언해줘야-한다"><a href="#1-복합키에-따른-객체를-선언해줘야-한다" class="headerlink" title="1. 복합키에 따른 객체를 선언해줘야 한다."></a><strong>1. 복합키에 따른 객체를 선언해줘야 한다.</strong></h3><ul><li>challengeId와 name을 복합키로 가지므로, Challenge 객체와 Tag 객체를 멤버로 가져야 한다.</li><li>각 객체는 @MapsId(“필드명”)으로 연결해줘야 한다. (괄호 안 이름은 ChallengeTagPK의 필드명이다.)</li></ul><h2 id="2-모든-필드를-매개변수로-받는-생성자를-선언해야-한다"><a href="#2-모든-필드를-매개변수로-받는-생성자를-선언해야-한다" class="headerlink" title="2. 모든 필드를 매개변수로 받는 생성자를 선언해야 한다."></a><strong>2. 모든 필드를 매개변수로 받는 생성자를 선언해야 한다.</strong></h2><ul><li>이때 기본키를 담당하는 객체는 new로 초기화 한다!</li><li>@AllArgsConstructor로 하지 않는다.</li></ul><h2 id="ChallengeTagPK-기본키-클래스"><a href="#ChallengeTagPK-기본키-클래스" class="headerlink" title="ChallengeTagPK(기본키 클래스)"></a>ChallengeTagPK(기본키 클래스)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChallengeTagPK</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long challengeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Embeddable을 붙이면 복합키를 표현하는 클래스이다.</p><p>몇 가지 중요한 점을 살펴보자.</p><h3 id="1-Setter-메서드를-선언해줘야-한다"><a href="#1-Setter-메서드를-선언해줘야-한다" class="headerlink" title="1. Setter 메서드를 선언해줘야 한다."></a>1. Setter 메서드를 선언해줘야 한다.</h3><ul><li>나중에 이 클래스의 필드를 challenge와 tag의 기본키를 가져와 초기화한다.</li></ul><h3 id="2-Serializable을-구현해야-한다"><a href="#2-Serializable을-구현해야-한다" class="headerlink" title="2. Serializable을 구현해야 한다."></a>2. Serializable을 구현해야 한다.</h3><ul><li>Serializable은 직렬화가 가능하다는 의미이다.<ul><li>자바 객체를 외부 자바 시스템에서도 사용할 수 있도록 byte 형태로 데이터를 변환하는게 직렬화이다.<br>(자바 객체를 바이트로 만들면 다른 자바 시스템에서 Reader로 읽어들일 수 있다.)</li></ul></li></ul><h3 id="3-equals와-hashcode를-오버라이딩-해줘야-한다"><a href="#3-equals와-hashcode를-오버라이딩-해줘야-한다" class="headerlink" title="3. equals와 hashcode를 오버라이딩 해줘야 한다."></a>3. equals와 hashcode를 오버라이딩 해줘야 한다.</h3><ul><li>기본키는 식별할 수 있도록 해주는 역할이다.</li><li>@Embeddable이 붙은 객체는 각 객체들과 구분되는 기준이 명확해야 한다.<br>이 기준을 equals와 hashcode를 오버라이딩해서 해결한다.</li><li>롬복으로 @EqualsAndHashCode 를 붙여주면 쉽게 해결 가능하다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/spring/">Spring</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/spring/jpa/">JPA</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/sable-project/">sable project</category>
      
      
      <comments>https://yangdongjue5510.github.io/2022/02/03/spring/JPA/compositekey/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>데이터베이스 설계 프로세스</title>
      <link>https://yangdongjue5510.github.io/2022/01/06/cs/database/powerofdatabase01/</link>
      <guid>https://yangdongjue5510.github.io/2022/01/06/cs/database/powerofdatabase01/</guid>
      <pubDate>Thu, 06 Jan 2022 13:35:42 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;요약&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;데이터베이스 설계 과정을 배운다.&lt;/p&gt;
&lt;p&gt;실전 예제로는 패캠 부트캠프 파이널 프로젝트(Sable 함께모으기 서비스) 예시로 한다.&lt;/p&gt;
&lt;h1 id=&quot;임무-목표와-임무-명세</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>요약</p></blockquote><p>데이터베이스 설계 과정을 배운다.</p><p>실전 예제로는 패캠 부트캠프 파이널 프로젝트(Sable 함께모으기 서비스) 예시로 한다.</p><h1 id="임무-목표와-임무-명세-정의"><a href="#임무-목표와-임무-명세-정의" class="headerlink" title="임무 목표와 임무 명세 정의"></a>임무 목표와 임무 명세 정의</h1><p>임무 명세 : 이 데이터베이스의 존재 이유나 목적을 단순한 한 문장으로 정리</p><p>임무 목표 : 이 데이터베이스가 수행해야 할 작업을 정리.</p><p>이렇게 작성된 목표와 임무 명세는 사용자와 관리자에게 타당해야 한다.<br>각 임무 목표는 하나의 작업을 너무 디테일하지 않을 정도로 기술한다.</p><blockquote><p>예시</p></blockquote><p>임무 명세 : 함께 모으기 데이터베이스는 Sable의 함께모으기(저축 챌린지)에 필요한 데이터를 관리한다.</p><p>임무 1. 챌린지의 정보를 완전히 관리한다.<br>임무 2. 사용자의 정보를 완전히 관리한다.<br>임무 3. 챌린지마다 사용자가 작성한 리뷰를 관리한다.<br>임무 4. 사용자의 계좌를 관리한다.<br>임무 5. 챌린지의 계좌를 관리한다.</p><h1 id="기존-데이터베이스-분석"><a href="#기존-데이터베이스-분석" class="headerlink" title="기존 데이터베이스 분석"></a>기존 데이터베이스 분석</h1><p>해당 데이터베이스의 사용자와 관리자의 요구사항을 인터뷰. 기존의 데이터베이스 분석.</p><p>인터뷰를 통해 대상과 사건을 특정할 수 있다.<br>(<strong>사용자</strong>는 <strong>챌린지</strong>에 참여해서 <strong>규칙</strong>에 따라 <strong>저축</strong> 을 한다.)<br>여기서 대상은 사용자, 챌린지, 규칙, 저축이다.</p><p>대상을 정리했으면, 각 대상에 대한 특징을 찾아낼 수 있다.</p><p>이 과정에서 예상되는 필드를 구성할 수 있다.</p><ul><li>어떤 대상이, 어떤 특징을 가지는 지 분석</li><li>특정 대상의 특징을 설명하는게 필드다.</li><li>값 목록(특별한 값의 집합을 나타내는 특성)은 따로 표시한다.</li><li>계산된 필드는 따로 정리한다.</li><li>중복된 특성은 하나의 필드로 정리한다.(혹은 여러개로 나눠야 할 특성은 분해한다.)</li></ul><blockquote><p>예시</p></blockquote><h4 id="일단-우리-서비스에-요구사항을-정리해본다"><a href="#일단-우리-서비스에-요구사항을-정리해본다" class="headerlink" title="일단 우리 서비스에 요구사항을 정리해본다."></a>일단 우리 서비스에 요구사항을 정리해본다.</h4><p>사용자는 이름, 이메일, 생년월일, 닉네임, 성별, 비밀번호, 하나의 사용자 계좌와 여러 개의 챌린지 계좌를 가진다.<br>챌린지는 챌린지 호스트, 챌린지 이름, 챌린지 시작일, 챌린지 종료일, 챌린지 내용, 챌린지 주기, 챌린지 목표 금액,  챌린지 성공한 사람들의 리뷰를 가진다.<br>챌린지는 챌린지 모드와 자유 모드가 있다.<br>챌린지 모드는 패널티 금액을 가진다.<br>자유 모드는 패널티 금액이 없다.<br>챌린지는 정해진 시간 전에 모집을 시작해서 시작일이 되면 모집을 마감한다.<br>사용자는 각 챌린지에서 자신이 원할 때 원하는 금액을 사용자 계좌에서 빼서 챌린지 계좌에 저축할 수 있다.<br>각 챌린지 계좌에 사용자가 저금한 내용은 저장된다.<br>….</p><h4 id="이제-대상을-정리해본다-대상은-사람-장소-물건-사건-등…"><a href="#이제-대상을-정리해본다-대상은-사람-장소-물건-사건-등…" class="headerlink" title="이제 대상을 정리해본다. (대상은 사람, 장소, 물건, 사건 등…)"></a>이제 대상을 정리해본다. (대상은 사람, 장소, 물건, 사건 등…)</h4><p>사용자, 챌린지, 호스트, 리뷰, 사용자 계좌, 챌린지 계좌</p><h4 id="이제-대상마다-특징을-정리해본다-계산된-필드와-값-목록-필드를-구분한다"><a href="#이제-대상마다-특징을-정리해본다-계산된-필드와-값-목록-필드를-구분한다" class="headerlink" title="이제 대상마다 특징을 정리해본다.(계산된 필드와 값 목록 필드를 구분한다.)"></a>이제 대상마다 특징을 정리해본다.(계산된 필드와 값 목록 필드를 구분한다.)</h4><p> 특징(필드) : 이메일, 생년월일, 닉네임, 성별, 비밀번호, 사용자 공식 여부, 챌린지 이름, 챌린지 시작일, 챌린지 종료일, 챌린지 내용, 챌린지 주기, 챌린지 목표금액, 챌린지 패널티 금액, 챌린지 공식 여부, 챌린지 모드</p><p>값 목록 필드 : 사용자가 가지는 챌린지 계좌들, 챌린지에 참여한 사용자들, 사용자가 한 챌린지에 저금한 내용들, 사용자가 참여한 챌린지들, 사용자가 만든 챌린지들</p><p>계산된 필드 : 사용자의 미션 달성율, 사용자의 챌린지 예금 합, 사용자의 챌린지 저축액 / 챌린지 목표 금액, 챌린지의 참여 사용자 합</p><h1 id="데이터-구조-생성"><a href="#데이터-구조-생성" class="headerlink" title="데이터 구조 생성"></a>데이터 구조 생성</h1><ol><li>예비 필드 목록이 존재하면 이를 기반으로 대상에 할당해본다.(대상을 잘 설명하는 것 같은 필드를 할당)<ul><li>예비 필드 목록을 검토하는 중 새로운 대상이 필요하면 추가한다.</li></ul></li><li>앞 단계들을 통해 표현할 다양한 대상를 선정하여 테이블들에 할당한다.<br>(<em>처음 테이블을 만들면 모든 테이블은 데이터 테이블이 된다.</em>)<ol><li>데이터 테이블 : 조직에 중요한 주제를 나타냄</li><li>연결 테이블 : 다대다 관계의 두테이블의 연결 설정</li><li>부분 집합 테이블 : 특정 데이터 테이블과 관계. 특정 주제를 구체적으로 설명.<br>부분 집합 테이블은 데이터들이 해당 필드를 모두 사용하지 않은 경우가 많은 경우를 말한다.<br>(재고 테이블은 책 테이블과 장비 테이블을 하위 테이블로 만들 수 있다. (이는 서로 1대1 관계를 가진다.))</li><li>검증 테이블 : 데이터 무결성을 제공하는 중요한 테이블</li></ol></li><li>각 테이블의 필드들 할당하고 검토<ul><li><strong>좋은 필드의 조건</strong>을 따르는지 확인</li><li>필드들이 단독 값을 저장.</li><li>다중 구조나 다중값 필드는 개선</li><li>부분 집합 테이블을 구성한다.</li></ul></li><li>각 테이블 키 설정<ul><li>각 키는 데이터베이스에서 유일하게 식별할 수 있는 값이어야 한다.<br>(부분 집합 테이블을 제외하면 동일한 기본키를 가지면 안된다.)</li><li>만약 마땅한 키가 없는 경우, 인위적인 키를 만들어줄 수 있다.</li></ul></li><li>데이터베이스 각 필드의 필드 명세 설정<ul><li>일반적 요소 : 필드 이름, 소속 테이블 등…</li><li>물리적 요소 : 데이터 타입, 길이, 문자 지원 등..</li><li>논리적 요소 : 키 종류, 유일성, 널 지원, 기본값 등..</li></ul></li></ol><h5 id="좋은-필드의-조건"><a href="#좋은-필드의-조건" class="headerlink" title="좋은 필드의 조건"></a>좋은 필드의 조건</h5><ul><li>테이블의 대상의 특성을 잘 설명하는 필드가 되도록 한다.</li><li>필드는 단 하나의 값을 포함한다</li><li>더 작은 구성요소로 해체 될 수 없다.</li><li>계산되거나 연결된 값은 포함하지 않는다.</li><li>전체 데이터베이스에서 해당 필드는 유일하다.(연결되는 필드 외에..)</li><li>다중 부분 필드는 여러 필드로 나눠준다. (이름 -&gt; 성 , 이름)</li><li>다중값 필드는 새로운 테이블로 분리해서 사용한다.</li></ul><blockquote><p>예시</p></blockquote><h4 id="예비-필드-목록을-대상에-할당"><a href="#예비-필드-목록을-대상에-할당" class="headerlink" title="예비 필드 목록을 대상에 할당"></a>예비 필드 목록을 대상에 할당</h4><p>사용자 - 이메일, 생년월일, 닉네임, 성별, 비밀번호, 사용자 공식 여부</p><p>챌린지 - 챌린지 식별아이디, 챌린지 이름, 시작일, 종료일, 내용, 주기, 목표금액, 패널티 금액, 챌린지 공식여부, 챌린지 모드, 챌린지 유효 여부</p><p>사용자 계좌 - 계좌 소유자, 계좌 잔고</p><p>챌린지 계좌 - 계좌 소유자, 계좌 잔고, 소속 챌린지 아이디</p><p>리뷰 - 리뷰 작성자 이메일, 리뷰 내용, 리뷰 작성 날짜, 리뷰의 챌린지 아이디</p><h4 id="값-목록-필드는-다른-테이블로-분리하고-종속되는-주제는-부분-집합-테이블로-만든다"><a href="#값-목록-필드는-다른-테이블로-분리하고-종속되는-주제는-부분-집합-테이블로-만든다" class="headerlink" title="값 목록 필드는 다른 테이블로 분리하고, 종속되는 주제는 부분 집합 테이블로 만든다"></a>값 목록 필드는 다른 테이블로 분리하고, 종속되는 주제는 부분 집합 테이블로 만든다</h4><p>챌린지의 태그는 따로 일대다 관계를 가지는 태그 테이블로 따로 빼서 만들고,</p><p>계좌 - 사용자 입출금 계좌 &amp; 챌린지 계좌 구조는 종속되는 주제인 사용자 계좌와 챌린지 계좌를 따로 부분집합 테이블로 만든다.</p><h1 id="테이블-관계-연결-및-결정"><a href="#테이블-관계-연결-및-결정" class="headerlink" title="테이블 관계  연결 및 결정"></a>테이블 관계  연결 및 결정</h1><p>테이블은 1대1, 1대다, 다대다 관계가 있다.<br>다만 다대다 관계는 주의해야 한다.</p><h5 id="다대다-관계의-문제"><a href="#다대다-관계의-문제" class="headerlink" title="다대다 관계의 문제"></a>다대다 관계의 문제</h5><p>다대다 관계로 외래키를 도입하면 그 외래키가 중복 데이터가 많이 발생한다.<br>그리고 만약 하나만 관계를 맺는 튜플을 삭제하면, 그 관계를 맺는 다른 테이블의 해당 튜플이 삭제될 수 있다.</p><p>학생과 수업 테이블이 다대다이고 서로 id을 외래키로 연결한다고 하면,<br>학생 테이블의 수업id가 중복되는 데이터가 많아진다.<br>한 학생만 듣는 수업이 있다고 했을 때, 그 학생을 삭제하면 그 수업이 삭제될 수 있다.</p><ol><li>테이블 관계와 관계의 특징을 확인</li><li>기본 키나 연결 테이블을 통해 각 관계에 있는 테이블 간의 논리적인 연결 설정.</li><li>각 테이블에 대한 참여의 유형과 정도를 결정</li></ol><h1 id="업무-규칙-정의-및-결정"><a href="#업무-규칙-정의-및-결정" class="headerlink" title="업무 규칙 정의 및 결정"></a>업무 규칙 정의 및 결정</h1><ol><li>데이터베이스의 다양한 측면에서 제약사항 확인</li><li>업무 규칙 설정</li><li>검증 테이블을 정의, 구현</li></ol><h1 id="뷰의-정의-및-결정"><a href="#뷰의-정의-및-결정" class="headerlink" title="뷰의 정의 및 결정"></a>뷰의 정의 및 결정</h1><ol><li>데이터로 작업하는 다양한 방법을 확인 (상세 정보 조회, 요약 조회 등..)</li><li>적당한 테이블과 필드를 활용해서 뷰를 정의(뷰의 표준을 정할 수 있음.)</li></ol><h1 id="데이터-무결성-재확인"><a href="#데이터-무결성-재확인" class="headerlink" title="데이터 무결성 재확인"></a>데이터 무결성 재확인</h1><ol><li>설계된 테이블이 잘 설계된 테이블인지 확인</li><li>필드가 적절한 구조인지 확인</li><li>테이블 수준 무결성 확인</li><li>필드 명세 점검, 무결성 점검</li><li>관계 유효성 점검, 각 테이블 참여 특징 명확히 결정.</li><li>데이터베이스의 다양한 측면에 있는 제약사항 결정</li></ol>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/computer-science/">Computer Science</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/computer-science/database/">Database</category>
      
      
      
      <comments>https://yangdongjue5510.github.io/2022/01/06/cs/database/powerofdatabase01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>우아한테크코스 4기 최종 코딩테스트 후기</title>
      <link>https://yangdongjue5510.github.io/2021/12/19/java/woowa-tech-course/utecoprecourse4/</link>
      <guid>https://yangdongjue5510.github.io/2021/12/19/java/woowa-tech-course/utecoprecourse4/</guid>
      <pubDate>Sun, 19 Dec 2021 12:39:13 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;최종-코딩테스트-문제-링크&quot;&gt;&lt;a href=&quot;#최종-코딩테스트-문제-링크&quot; class=&quot;headerlink&quot; title=&quot;최종 코딩테스트 문제 링크&quot;&gt;&lt;/a&gt;최종 코딩테스트 문제 링크&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://githu</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="최종-코딩테스트-문제-링크"><a href="#최종-코딩테스트-문제-링크" class="headerlink" title="최종 코딩테스트 문제 링크"></a>최종 코딩테스트 문제 링크</h1><p><a href="https://github.com/woowacourse/java-pairmatching-precourse">https://github.com/woowacourse/java-pairmatching-precourse</a></p><h1 id="아쉬운-점"><a href="#아쉬운-점" class="headerlink" title="아쉬운 점"></a>아쉬운 점</h1><h2 id="검증-로직-중복"><a href="#검증-로직-중복" class="headerlink" title="검증 로직 중복"></a>검증 로직 중복</h2><p>과정, 레벨, 미션을 입력받을 때, 해당 과정, 레벨, 미션이 존재하는지 검증해야 된다.<br>나는 이를 검사하는 메서드를 각 열거형 객체가 가지고 있도록 하고 findByName메서드로 이름에 맞는 객체를 가져오도록 했다.</p><p>과정을 예를 들면 다음과 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">BACKEND(<span class="string">&quot;백엔드&quot;</span>),</span><br><span class="line">FRONTEND(<span class="string">&quot;프론트엔드&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">Course(String name) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Course <span class="title">findByName</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">exceptionNotContain(input);</span><br><span class="line"><span class="keyword">return</span> Arrays.stream(Course.values()).filter(course -&gt; course.name.equals(input)).findFirst().get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exceptionNotContain</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Arrays.stream(Course.values()).anyMatch(course -&gt; course.name.equals(input))) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(NO_EXIST_COURSE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 exceptionNotContain(String input)이 입력값이 존재하는 지 검증하고 예외를 출력한다.<br>만약 외부에서 과정 객체를 가져오고 싶다면, findByName(String input)을 호출하면 된다.<br>없는 경우는 예외를 일으키고, 있는 경우 해당 객체를 반환할 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchingInformation</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Course course;</span><br><span class="line"><span class="keyword">private</span> Level level;</span><br><span class="line"><span class="keyword">private</span> Mission mission;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MatchingInformation</span><span class="params">(Course course, Level level, Mission mission)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.course = course;</span><br><span class="line"><span class="keyword">this</span>.level = level;</span><br><span class="line"><span class="keyword">this</span>.mission = mission;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MatchingInformation <span class="title">of</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; information = split(line);</span><br><span class="line">Course course = Course.findByName(information.get(COURSE_INDEX));</span><br><span class="line">Level level = Level.findByName(information.get(LEVEL_INDEX));</span><br><span class="line">Mission mission = Mission.findByName(information.get(MISSION_INDEX));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MatchingInformation(course, level, mission);</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>매칭 정보 일급컬렉션을 생성할 때, 입력받은 이름을 토대로 findByName메서드를 호출하는 것을 볼 수 있다.</p><p>문제는 과정, 레벨, 미션 이 세가지 열거형 모두 이 메서드를 가지고 있는데, 모두 중복되는 코드로 작성했다.<br>인터페이스를 도입하자니 검증 메서드가 static이라서 힘들었다.</p><h2 id="과정-레벨-출력"><a href="#과정-레벨-출력" class="headerlink" title="과정, 레벨 출력"></a>과정, 레벨 출력</h2><p>과정, 레벨, 미션을 도입하기 전에 항상 과정, 레벨, 미션을 출력해야 한다.</p><p>나는 마음이 급해서 그냥 바로 문자열로 만들어서 매번 출력하도록 처리했다.<br>근데 다른 PR을 보니, 과정, 레벨, 미션을 저장하고, 저장된 정보를 토대로 출력하는 사람들이 많았다.(대단..)</p><h2 id="묻지-말고-시키기"><a href="#묻지-말고-시키기" class="headerlink" title="묻지 말고 시키기"></a>묻지 말고 시키기</h2><p>객체가 가진 데이터를 가져오지 말고, 객체에게 책임을 전달해야 되는데, 기능 구현에 급급하다보니, getter 메서드로 객체에게 묻는 로직이 상당히 많았다.<br>프리코스에서 가장 인상깊게 생각한 피드백이고, 지키기 위해서 노력했는데 막상 시험에서 지키지 못하니 아쉽다.</p><h2 id="구현하지-못한-기능"><a href="#구현하지-못한-기능" class="headerlink" title="구현하지 못한 기능"></a>구현하지 못한 기능</h2><p>페어를 만들 수 없는 상황을 예외 처리해줘야 했는데, 시험을 풀 당시 페어를 만들 수 없는 상황이 뭔지 몰라서 구현을 못했다…</p><p>알고보니 크루가 2명보다 적으면 페어를 못만드는 상황이 생긴다는 것……<br>생각해보니 쉬운 로직인데 너무 긴장해서 구현하지 못한 거 같다. 시간이 부족하기도 했고.</p><h1 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h1><p>돌이켜보면 믿기지 않는 한달이었다.<br>설마 되겠냐는 생각으로 서류 지원했는데 덜컥 붙어서 정신없이 프리코스를 진행한 것 같다.<br>다른 지원자들의 PR을 보니 내가 우물 속 개구리 인걸 깨달았다.</p><p>3주 동안 정말 많은 걸 배웠다.<br>의식있는 노력을 통해 익숙함을 벗어나서 더 좋은 코드를 추구하는 마음가짐을 배웠다.<br>평소 잘 모르는 걸 알면서 방치했던 git 사용법도 이번 기회로 정리해서 배웠다.<br>하드코딩을 제거해서 다른 사람들이 봐도 이해할 수 있는 코드를 작성할 수 있음을 배웠다.<br>한 메서드가 한 역할을 수행하라는 원칙도 알고는 있었는데, 실천을 통해 더 자세히 체화했다.<br>예외가 발생하는 상황을 처리해서 프로그램이 다시 입력할 수 있도록 하는 방법을 배웠다.<br>객체지향 설계를 직접 실천해보고 객체 지향의 기본 개념들을 배웠다.</p><p>프리코스를 해보니, 우아한 테크코스에 가고 싶은 생각이 더 깊어졌다.<br>혹시 내가 자격이 있을까 고민하는 개발 지망생들이 있다면, 꼭 지원해서 프리코스까지 체험해보길 적극 추천한다.</p>]]></content:encoded>
      
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2021/12/19/java/woowa-tech-course/utecoprecourse4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>메시지와 인터페이스</title>
      <link>https://yangdongjue5510.github.io/2021/12/16/java/object/object4/</link>
      <guid>https://yangdongjue5510.github.io/2021/12/16/java/object/object4/</guid>
      <pubDate>Thu, 16 Dec 2021 11:13:44 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;메시지-인터페이스&quot;&gt;&lt;a href=&quot;#메시지-인터페이스&quot; class=&quot;headerlink&quot; title=&quot;메시지, 인터페이스&quot;&gt;&lt;/a&gt;메시지, 인터페이스&lt;/h1&gt;&lt;p&gt;메시지는 객체들이 협력하기 위해 사용할 수 있는 유일한 의사소통 수단이다</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="메시지-인터페이스"><a href="#메시지-인터페이스" class="headerlink" title="메시지, 인터페이스"></a>메시지, 인터페이스</h1><p>메시지는 객체들이 협력하기 위해 사용할 수 있는 유일한 의사소통 수단이다.<br>메시지는 오퍼레이션 이름과 인자로 구성된다.</p><p>receiver.message(argument); 이렇게 메시지를 구성할 수 있다.</p><h3 id="메시지와-메서드"><a href="#메시지와-메서드" class="headerlink" title="메시지와 메서드"></a>메시지와 메서드</h3><p>그렇지만 메시지가 한 메서드를 가르키는 건 아니다.<br>메서드는 메시지를 수신하는 객체, 인자에 따라 달라진다.<br>메서드는 메시지를 수신했을 때 실행되는 함수를 의미한다.</p><p>이렇게 메시지와 메서드를 구분하면,<br>메시지 전송자와 수신자가 느슨하게 결합된다.<br>전송자는 그냥 내가 어떤 메시지를 보낼 지만 생각하면된다.<br>수신자는 그냥 메시지에 따라 메서드를 실행하기만 하면된다.</p><p>전송자는 수신자가 어떻게 메시지를 처리하는 지 감춰지게 된다.</p><h3 id="퍼블릭-인터페이스"><a href="#퍼블릭-인터페이스" class="headerlink" title="퍼블릭 인터페이스"></a>퍼블릭 인터페이스</h3><p>퍼블릭 인터페이스는 객체가 의사소통을 위해 공개하는 메시지의 집합이다.<br>퍼블릭 인터페이스에 포함된 메시지를 오퍼레이션이라고 부른다.<br>(오퍼레이션은 어떤 행동에 대한 추상화된 것이라고 보자.)</p><p>시그니처는 오퍼레이션 이름과 파라미터 목록을 합친 것이다.<br>시그니처에 구현을 더하면 메서드가 된다!</p><h1 id="좋은-인터페이스를-위해서"><a href="#좋은-인터페이스를-위해서" class="headerlink" title="좋은 인터페이스를 위해서"></a>좋은 인터페이스를 위해서</h1><p>인터페이스는 <strong>최소한으로, 추상적이어야 한다.</strong></p><p>이런 원칙을 지키기 위해서는 책임주도 설계가 하는게 좋다.<br>메시지를 먼저 선택해서 협력에 상관없는 오퍼레이션을 제거할 수 있다.<br>메시지가 객체를 선택하도록 해서 객체의 의도를 메시지에 표현 할 수 있다.</p><p>다음 규칙을 통해 좋은 인터페이스 규칙을 알아보자.</p><h3 id="디미터-법칙-협력-경로를-제한하라"><a href="#디미터-법칙-협력-경로를-제한하라" class="headerlink" title="디미터 법칙 : 협력 경로를 제한하라"></a>디미터 법칙 : 협력 경로를 제한하라</h3><p>낯선 객체와 협력하지 말고 이웃과 협력하라.<br>객체가 특정 조건을 만족하는 대상에게 메시지를 전송하도록 제한.</p><p>한 객체는 다음 대상들에게 메시지를 전송하도록 제한하자.</p><ol><li><u>this 객체</u></li><li><u>메서드 매개변수</u></li><li><u>this의 속성</u></li><li><u>this의 속성인 컬렉션의 요소</u></li><li><u>메서드 내에서 생성된 지역 객체</u></li></ol><p>이런 식의 코드는 디미터 법칙을 위반하는 예시다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Reservation <span class="title">reserve</span><span class="params">(Screening screening)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  screening.getMovie.getDiscountConditions(); <span class="comment">//위반!!</span></span><br><span class="line">  screening.calculateFee(audienceCount);<span class="comment">//준수!!</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위반코드는 Movie 객체에게 메시지를 전달하고 있다.<br>Movie 객체는 위 다섯가지에 속하지 않는다!!<br>연쇄적으로 메시지를 전달하는 코드를 <strong>기차 충돌 코드</strong>라고 한다.</p><p>준수코드는 screening에게 메시지를 전달하므로 디미터 법칙을 준수했다.</p><p>하지만 <strong>디미터 법칙은 객체의 응집도가 낮아질 수 있다.</strong></p><h4 id="묻지-말고-시켜라"><a href="#묻지-말고-시켜라" class="headerlink" title="묻지 말고 시켜라"></a>묻지 말고 시켜라</h4><p>메시지 전송자는 메시지 수신자의 상태를 기반으로 결정 내리고 수신자의 상태를 바꾸면 안된다!!!<br>전송자가 수신자의 상태를 기반으로 결정하는 건 캡슐화 위반이다!</p><p>묻지 말고 시켜라는 객체의 상태와 행동이 서로 밀첩하도록 설계하게 한다.</p><h3 id="의도를-드러내는-인터페이스"><a href="#의도를-드러내는-인터페이스" class="headerlink" title="의도를 드러내는 인터페이스"></a>의도를 드러내는 인터페이스</h3><p>인터페이스의 메서드는 어떻게가 아닌 무엇을 하는지 드러내도록 하라.<br>무엇을 하는지 드러낸다는 것은, 그 인터페이스의 메서드가가 어떤 책임을 지는지를 표현하는 것이다.<br>절대 내부 구현을 메서드의 이름으로 표현하지 않는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeriodCondition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSatisfiedByPeriod</span><span class="params">(Screening screening)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceCondition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSatisfiedBySequence</span><span class="params">(Screening screening)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 상영 정보를 받아서 해당 할인 조건에 맞는 지 검증한다.<br>그러나 위 코드의 메서드들은 클라이언트 입장에서 동일한 일을 한다. 그런데 이 두 메서드가 연관있음을 알 수 없다.<br>또한 판단 기준이 약간 수정된다면 메서드 명을 변경해줘야 되는 일이 생긴다.(캡슐화가 안된다는 소리.)</p><p>다음 코드로 바꿔주는게 적절하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DiscountCondition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(Screening screening)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeriodCondtion</span> <span class="keyword">implements</span> <span class="title">DiscountCondition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(Screening screening)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceCondition</span> <span class="keyword">implements</span> <span class="title">DiscountCondition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(Screening screening)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>결론</p></blockquote><p>객체에게 묻지 말고 시키되, 구현 방법이 아닌 클라이언트의 의도를 드러내는 메시지를 전달하자.</p>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8/">오브젝트</category>
      
      
      <comments>https://yangdongjue5510.github.io/2021/12/16/java/object/object4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>깃 사용법(브랜치 활용 등)</title>
      <link>https://yangdongjue5510.github.io/2021/12/12/github-study/</link>
      <guid>https://yangdongjue5510.github.io/2021/12/12/github-study/</guid>
      <pubDate>Sun, 12 Dec 2021 13:35:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;git을-잘-다루기&quot;&gt;&lt;a href=&quot;#git을-잘-다루기&quot; class=&quot;headerlink&quot; title=&quot;git을 잘 다루기&quot;&gt;&lt;/a&gt;git을 잘 다루기&lt;/h1&gt;&lt;h2 id=&quot;브랜치-생성-브랜치-이동&quot;&gt;&lt;a href=&quot;#브랜치-생성-브</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="git을-잘-다루기"><a href="#git을-잘-다루기" class="headerlink" title="git을 잘 다루기"></a>git을 잘 다루기</h1><h2 id="브랜치-생성-브랜치-이동"><a href="#브랜치-생성-브랜치-이동" class="headerlink" title="브랜치 생성, 브랜치 이동"></a>브랜치 생성, 브랜치 이동</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">깃 초기화</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">최초 커밋하기</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"></span><br><span class="line">브랜치 생성하기</span><br><span class="line">git branch issue1</span><br><span class="line"></span><br><span class="line">브랜치 이동하기</span><br><span class="line">git checkout issue1</span><br><span class="line"></span><br><span class="line">브랜치 생성하고 이동하기</span><br><span class="line">git checkout -b issue2</span><br></pre></td></tr></table></figure><h2 id="브랜치-합치기"><a href="#브랜치-합치기" class="headerlink" title="브랜치 합치기"></a>브랜치 합치기</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">다른 브랜치와 합치기</span><br><span class="line">(현재 위치에 다른 브랜치를 합침.)</span><br><span class="line">(빨리 감기 병합.)</span><br><span class="line">git merge issue1</span><br></pre></td></tr></table></figure><h2 id="브랜치-삭제하기"><a href="#브랜치-삭제하기" class="headerlink" title="브랜치 삭제하기"></a>브랜치 삭제하기</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d issue2</span><br></pre></td></tr></table></figure><h2 id="브랜치-병합-시-충돌-해결"><a href="#브랜치-병합-시-충돌-해결" class="headerlink" title="브랜치 병합 시 충돌 해결"></a>브랜치 병합 시 충돌 해결</h2><p>issue1 브랜치에는 다음과 같이 text.txt가 커밋되어 있고.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">whats up</span><br></pre></td></tr></table></figure><p>issue2 브랜치에는 다음과 같이 text.txt가 커밋 되어 있다고 하자.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello 안녕</span><br></pre></td></tr></table></figure><p>이 상태에서 두 브랜치를 병합하려하면 문제가 생긴다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">현재 HEAD가 issue1에 있을 때를 가정.</span><br><span class="line">git merge issue2</span><br><span class="line">Auto-merging text.txt</span><br><span class="line">CONFLICT (content): Merge conflict in text.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>그리고 text.txt를 보면 다음과 같다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">hello</span><br><span class="line">whats up!~~~</span><br><span class="line">=======</span><br><span class="line">hello 하이</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; issue2</span><br></pre></td></tr></table></figure><p>이 충돌된 내용 ( &lt;&lt;&lt;… , ===… , &gt;&gt;&gt;…)을 잘 처리해주고 다시 커밋하면 된다.<br>다음과 같이 수정하고 커밋해보자.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">whats up!~~~</span><br><span class="line">hello 하이</span><br></pre></td></tr></table></figure><h2 id="rebase로-통합하기"><a href="#rebase로-통합하기" class="headerlink" title="rebase로 통합하기"></a>rebase로 통합하기</h2><p>rebase는 다른 브랜치의 내용을 모두 받아들이고, 자신의 모든 커밋을 그 다음에 이어서 진행하도록 하는 명령이다.</p><p>이전에 했던 merge와 다르게 다른 브랜치를 합치면 원래의 커밋기록이 변경된다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">아까 했던걸 취소한다.</span><br><span class="line">git reset --hard HEAD~</span><br><span class="line"></span><br><span class="line">rebase로 통합해보자.</span><br><span class="line">git rebase issue2</span><br><span class="line"></span><br><span class="line">당연히 문제가 생긴다. (충돌)</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: dkdk</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M       text.txt</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging text.txt</span><br><span class="line">CONFLICT (content): Merge conflict in text.txt</span><br><span class="line">error: Failed to merge in the changes.</span><br><span class="line">Patch failed at 0001 dkdk</span><br><span class="line">hint: Use &#x27;git am --show-current-patch&#x27; to see the failed patch</span><br><span class="line">Resolve all conflicts manually, mark them as resolved with</span><br><span class="line">&quot;git add/rm &lt;conflicted_files&gt;&quot;, then run &quot;git rebase --continue&quot;.</span><br><span class="line">You can instead skip this commit: run &quot;git rebase --skip&quot;.</span><br><span class="line">To abort and get back to the state before &quot;git rebase&quot;, run &quot;git rebase --abort&quot;.</span><br></pre></td></tr></table></figure><p>이전 챕터에서 했던 것처럼 다시 수정해서 커밋하면 충돌을 해결할 수 있다.</p><h2 id="cherry-pick-다른-브랜치의-특정-커밋만-가져오기"><a href="#cherry-pick-다른-브랜치의-특정-커밋만-가져오기" class="headerlink" title="cherry-pick 다른 브랜치의 특정 커밋만 가져오기"></a>cherry-pick 다른 브랜치의 특정 커밋만 가져오기</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [commit 아이디]</span><br></pre></td></tr></table></figure><h2 id="git-add-commit-취소하기"><a href="#git-add-commit-취소하기" class="headerlink" title="git add, commit 취소하기"></a>git add, commit 취소하기</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add 취소하기.</span><br><span class="line">git reset HEAD [FILE이름]</span><br><span class="line"></span><br><span class="line">commit 취소하기.</span><br><span class="line">1. commit을 취소하고, 파일들이 staged된 상태로 취소(add된 상태)</span><br><span class="line">$ git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line">2. commit을 취소하고, 파일들은 unstaged 상태로 워킹 디렉터리에 보존(디폴트 값.)</span><br><span class="line">$ git reset --mixed HEAD^</span><br><span class="line">$ git reset HEAD^ // 위와 동일</span><br><span class="line">$ git reset HEAD~2 // 마지막 2개의 commit을 취소</span><br><span class="line"></span><br><span class="line">3. commit을 취소하고, 파일들은 unstaged 상태로 워킹 디렉터리에서 삭제</span><br><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><h2 id="commit-message-수정"><a href="#commit-message-수정" class="headerlink" title="commit message 수정"></a>commit message 수정</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>fetch는 원격 저장소의 최신 내용을 새로운 브랜치로 가져온다.<br>이때 fetch의 브랜치는 이름없지만,  FETCH_HEAD라는 이름으로 checkout할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [리모트이름] [브랜치이름]</span><br></pre></td></tr></table></figure><h2 id="git-와"><a href="#git-와" class="headerlink" title="git ~와 ^"></a>git ~와 ^</h2><p><del>는 동일한 브랜치의 상위 커밋을 표현하고자 할 때 쓴다.<br>HEAD</del>1은 HEAD에서 같은 브랜치의 1개 전 커밋을 표현하다.</p><p>^는 브랜치로 분기 될 때 상위 커밋을 표현하고자 할 때 쓴다.<br>HEAD^2는 HEAD에서 다른 브랜치의 상위 커밋을 표현한다.</p>]]></content:encoded>
      
      
      
      <category domain="https://yangdongjue5510.github.io/tags/git/">git</category>
      
      
      <comments>https://yangdongjue5510.github.io/2021/12/12/github-study/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>우아한테크코스 4기 프리코스 3주차 회고</title>
      <link>https://yangdongjue5510.github.io/2021/12/10/java/woowa-tech-course/utecoprecourse3/</link>
      <guid>https://yangdongjue5510.github.io/2021/12/10/java/woowa-tech-course/utecoprecourse3/</guid>
      <pubDate>Fri, 10 Dec 2021 11:56:16 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;우아한-테크코스-4기-프리코스-3주차-회고&quot;&gt;&lt;a href=&quot;#우아한-테크코스-4기-프리코스-3주차-회고&quot; class=&quot;headerlink&quot; title=&quot;우아한 테크코스 4기 프리코스 3주차 회고&quot;&gt;&lt;/a&gt;우아한 테크코스 4기 프리코스 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="우아한-테크코스-4기-프리코스-3주차-회고"><a href="#우아한-테크코스-4기-프리코스-3주차-회고" class="headerlink" title="우아한 테크코스 4기 프리코스 3주차 회고"></a>우아한 테크코스 4기 프리코스 3주차 회고</h1><h2 id="3주차-문제-및-내-답안-링크"><a href="#3주차-문제-및-내-답안-링크" class="headerlink" title="3주차 문제 및 내 답안 링크"></a>3주차 문제 및 내 답안 링크</h2><p><a href="https://github.com/woowacourse/java-vendingmachine-precourse">https://github.com/woowacourse/java-vendingmachine-precourse</a></p><h2 id="마주한-문제들"><a href="#마주한-문제들" class="headerlink" title="마주한 문제들"></a>마주한 문제들</h2><h3 id="MVC-패턴-적용"><a href="#MVC-패턴-적용" class="headerlink" title="MVC 패턴 적용"></a>MVC 패턴 적용</h3><p>MVC 패턴은 Model, View, Controller를 기준으로 객체들을 분류해서 프로그램을 만드는 패턴이다.<br>2주차 피드백에 비즈니스 로직에 출력 관련 로직을 같이 두지 말라는 피드백이 있었다.<br>3주차에는 MVC 패턴을 도입해서 View 관련 로직을 분리하고자 했다.</p><p>Model은 데이터를 저장하고, 일관성 있게 처리하는 역할,<br>Controller는 사용자의 입력을 받고, view를 생성하거나 수정하고, model에 접근하여 데이터를 가져오는 역할,<br>View는 사용자에게 보여지는 부분을 구현하는 역할.</p><h5 id="컨트롤러-예시"><a href="#컨트롤러-예시" class="headerlink" title="컨트롤러 예시"></a>컨트롤러 예시</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputMoneyController</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputMoneyControl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">InputMoneyView.messageInputMoney();</span><br><span class="line">inputMachineMoney();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inputMachineMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MoneyRepository.initializeMachineMoney();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내 답안에 쓰인 컨트롤러 중 일부다.<br>이 객체는 자판기에 돈을 입금해야 하는  상황을 책임진다.<br>자판기는 사용자에게 돈을 입금하라는 메시지를 출력해줘야 한다.</p><p>출력은 InputMoneyView의 책임이다.<br>InputMoneyView.messageInputMoney()는 입금할 때 필요한 메시지를 출력하라는 의미다.</p><h5 id="뷰-예시"><a href="#뷰-예시" class="headerlink" title="뷰 예시"></a>뷰 예시</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputMoneyView</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">messageInputMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(MESSAGE_INPUT_MONEY);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>뷰가 메시지를 받으면 적절한 메시지를 출력하게 된다.</p><h5 id="모델-예시"><a href="#모델-예시" class="headerlink" title="모델 예시"></a>모델 예시</h5><p>위 컨트롤러를 보면, MoneyRepository.initializeMachineMoney(); 코드가 보일 것이다.<br>컨트롤러가 모델에게 메시지를 전달하고 있다.<br>기계에 돈을 초기화해서 저장해달라는 메시지를 전달한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoneyRepository</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Money vendingMachineMoney;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initializeMachineMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vendingMachineMoney = <span class="keyword">new</span> Money();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MoneyRepository는 내가 만든 코드에서 모델에 해당하는 객체다.<br>자판기에 저장되는 돈을 관리하는 책임을 진다.<br>initializeMachineMoney()를 통해 기계가 가진 돈을 초기화해서 저장할 수 있다.</p><h3 id="일급-컬렉션-도입하기"><a href="#일급-컬렉션-도입하기" class="headerlink" title="일급 컬렉션 도입하기"></a>일급 컬렉션 도입하기</h3><p>일급 컬렉션은, 컬렉션을 감싸는 클래스를 만들어서 사용하는 방법이다.<br>다음과 같이 컬렉션을 그냥 쓰지 말고, 멤버 변수가 컬렉션 하나뿐인 일급 컬렉션을 도입하면 이익이 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MachineCoins</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;Coin, Integer&gt; machineCoins = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">MachineCoins() &#123;</span><br><span class="line">initializeChangeCoins();</span><br><span class="line">setMachineCoins(MoneyRepository.getMachineMoney());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 자판기 기계에 동전을 담당하는 객체다.<br>이 객체가 생성되려면, initializeChangeCoins()와 setMachineCoins(MoneyRepository.getMachineMoney())를 실행한다.</p><p>map에 각 동전과 그 갯수를 0개로 초기화하고,<br>기계가 가진 돈만큼 동전을 만들어서 객체가 보관한다.<br>즉 MachineCoins는 자판기 기계가 가진 돈만큼 동전으로 만들어서 Map에 저장하는 자료구조이다.</p><p>만약 MachineCoins라는 객체가 아닌 그냥 Map&lt;Coin, Integer&gt; 객체로 자판기의 동전을 관리하면 문제가 있다.<br>위에서 얘기했듯이, 동전 갯수는 기계가 가진 돈만큼만 만들어야 한다.</p><p>일반 Map을 사용하면 해당 객체가 그런 조건을 달성했는지 알 수 없다.<br>혹은 다른 사람이 코드를 봤을 때, 조건이 필요한지 알 수 없다. (그냥 Map일 뿐…)</p><p>이때 MachineCoins같이 일급 컬렉션을 사용하면 조건을 달성했음을 보장할 수 있다.<br>그리고 조건을 검증하고, 상태와 행동을 한 클래스에서 확인 할 수 있어서 다른 사람이 파악하기도 편하다.</p><p>그리고 객체에 값을 수정하는 메소드를 만들지 않으면, 그 객체의 값을 불변으로 보장할 수 있기도 하다.</p><blockquote><p>참고</p></blockquote><p><a href="https://jojoldu.tistory.com/412">https://jojoldu.tistory.com/412</a></p><h3 id="맵-순회하는-방법-Map-Entry-Iterator"><a href="#맵-순회하는-방법-Map-Entry-Iterator" class="headerlink" title="맵 순회하는 방법 (Map Entry, Iterator)"></a>맵 순회하는 방법 (Map Entry, Iterator)</h3><p>동전 정보를 Map에 저장했었는데, 동전을 출력하는 로직에서 Map을 순회해야 했었다.</p><p>그냥 for문을 쓰면 될 줄 알았는데, 잘 되지 않았다.<br>다음은 내가 찾은 방법이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Coin, Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;Coin, Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Coin, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">  <span class="keyword">int</span> key = entry.getKey();</span><br><span class="line">  <span class="keyword">int</span> value = entry.getValue();</span><br><span class="line">  <span class="comment">//map.remove(key); 이건 될까?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 순회는 잘된다. map의 원소를 수정하면 concurrentmodificationexception가 발생한다.<br>그럴 땐 iterator를 도입한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Coin&gt; iterator = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">  iterator.next();</span><br><span class="line">  iterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 식으로 구현하면 순회와 동시에 삭제가 가능하다!</p><h1 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h1><p>긴장감 속에 치뤄진 프리코스가 끝을 향하고 있다.<br>사실 서류 통과가 될 지도 긴가민가했었는데, 어느새 프리코스를 마치고 최종 코딩테스트만 남기고 있다.<br>프리코스를 하기 전에는 내가 자바를 해본 경험이 꽤 있어서 무난하게 프리코스를 통과하지 않을까 싶었는데 오산이었다.</p><p>매 미션마다 다른 분들이 제출한 PR을 보면 엄청난 고수들이 많았다.<br>그럴 때마다 많은 좌절감을 느끼기도 했지만, 오히려 만약 이런 분들에게 피드백 받고 같이 공부하면<br>정말 소중한 기회일 것이고, 그래서 더 프리코스 과제에 더 집중하고자 했다.</p><p>프리코스는 매 주마다 미션을 하나씩 주고, 미션을 구현할 때 지켜야할 규칙을 제시한다.<br>정말 놀라운 건, 이 규칙들이 몇가지 안되는데, 이 규칙들을 지키기가 굉장히 까다롭다는 사실이다.</p><p>메서드 길이 15줄을 넘어가면 안되고, 메서드의 들여쓰기가 2를 넘으면 안된다.<br>이 두가지만 지키려고 해봐도 굉장히 까다롭고, 코드가 완전히 새로워진다.</p><p>그리고 클래스에게 책임을 나눠주고 여러 클래스들이 협력하도록 설계하는 게 재밌었다.<br>사실 스프링을 쓰다보면, 요구사항이 비슷한 경우가 많아서 설계도 비슷하게 반복되는 경우가 많았다.<br>그래서 설계를 크게 고민하지 않았던 적이 많은데 이번 프리코스는 스스로 설계를 고민해야 되는 부분이 많아서 흥미로웠다.</p><p>코딩 실력을 향상시키기에는 3주는 짧다고 볼 수 있지만,<br>프리코스를 하면서 정말 극적으로 코드 보는 시선이 넓어지고, 코드 짜는 좋은 습관도 생긴 것 같다.</p><p>프리코스의 모든 과정은 인터넷에 공개되어 있다.<br>이번 프리코스를 하면서 왜 진작 이런 자료를 찾아서 공부하지 않았는지 생각이 날 정도로 정말 귀한 경험이었다.</p><p>우아한 테크 코스 지원 여부를 떠나서, 프리코스는 초보 자바 개발자라면 반드시 참고하길 바란다.</p>]]></content:encoded>
      
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2021/12/10/java/woowa-tech-course/utecoprecourse3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>우아한테크코스 4기 프리코스 2주차 회고</title>
      <link>https://yangdongjue5510.github.io/2021/12/05/java/woowa-tech-course/utecoprecourse2/</link>
      <guid>https://yangdongjue5510.github.io/2021/12/05/java/woowa-tech-course/utecoprecourse2/</guid>
      <pubDate>Sat, 04 Dec 2021 15:40:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;우아한-테크코스-4기-프리코스-2주차-회고&quot;&gt;&lt;a href=&quot;#우아한-테크코스-4기-프리코스-2주차-회고&quot; class=&quot;headerlink&quot; title=&quot;우아한 테크코스 4기 프리코스 2주차 회고&quot;&gt;&lt;/a&gt;우아한 테크코스 4기 프리코스 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="우아한-테크코스-4기-프리코스-2주차-회고"><a href="#우아한-테크코스-4기-프리코스-2주차-회고" class="headerlink" title="우아한 테크코스 4기 프리코스 2주차 회고"></a>우아한 테크코스 4기 프리코스 2주차 회고</h1><h2 id="2주차-문제-amp-내-제출-답안"><a href="#2주차-문제-amp-내-제출-답안" class="headerlink" title="2주차 문제 &amp; 내 제출 답안"></a>2주차 문제 &amp; 내 제출 답안</h2><p><a href="https://github.com/woowacourse/java-racingcar-precourse">https://github.com/woowacourse/java-racingcar-precourse</a></p><p><a href="https://github.com/yangdongjue5510/java-racingcar-precourse">https://github.com/yangdongjue5510/java-racingcar-precourse</a></p><h2 id="마주한-문제들"><a href="#마주한-문제들" class="headerlink" title="마주한 문제들"></a>마주한 문제들</h2><h3 id="책임을-클래스들에게-분배하기"><a href="#책임을-클래스들에게-분배하기" class="headerlink" title="책임을 클래스들에게 분배하기"></a>책임을 클래스들에게 분배하기</h3><p>이번 문제는 메서드를 분리하는 것에 더해, 클래스를 분리해서 책임을 분배해야 한다는 미션을 받았다.</p><p>문제에는 Car 객체가 제시되어 활용하는 요구사항이 추가됐다.</p><p>일단 나눠주여 할 책임을 보면,</p><ul><li>사용자에게 입력을 받는 책임</li><li>입력된 값을 검증하는 책임</li><li>자동차를 만드는 책임</li><li>자동차의 게임을 진행하는 책임</li><li>레이싱 결과를 분별하는 책임</li><li>결과를 출력하는 책임</li></ul><p>이렇게 나눌 수 있었다.</p><p>나는  다음과 같이 클래스들에게 <strong>책임을 나눠줬다</strong>.</p><ul><li>입력을 담당하는 InputManager</li><li>입력값 검증하는 ValidChecker</li><li>자동차를 만들어 게임을 진행하는 RacingPlayer</li><li>자동차의 운행 여부를 판단하여 운행하는 Car</li><li>자동차 위치에 따라 우승자를 찾는 RacingReferee</li></ul><p>이렇게 역할을 나눠줬는데, 역할을 나눠주고 나니 <strong>각 객체의 인스턴스 변수를 다른 객체가 활용해야 하는 경우가 있었다.</strong></p><h4 id="패키지-분리-후-default-접근-지시자"><a href="#패키지-분리-후-default-접근-지시자" class="headerlink" title="패키지 분리 후 default 접근 지시자"></a>패키지 분리 후 default 접근 지시자</h4><p>나는 이 문제를 해결하기 위해 <strong>도매인과 관련된 Car, RacingPlayer, RacingReferee는 같은 패키지로 분리</strong>해줬다.</p><p>그리고 <strong>getter 메서드를 default로 추가</strong>해 도매인 관련된 객체들만 해당 인스턴스 변수를 이용할 수 있게 했다.</p><p>예시로 RacingReferee는 우승자들을 분류해서 리스트로 가지고, 우승자의 이름을 출력하는 책임을 지고 있다.<br>그런데 우승자(Car 객체)는 이름이 private로 되어 있다. 이럴 경우 default getter로 캡슐화를 최대한 준수하고자 했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">...</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="comment">//default 접근지시자를 활용했다.</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RacingReferee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Car&gt; winners;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printWinners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; winners.size(); i++) &#123;<span class="comment">//getName 메서드를 활용하고 있다.</span></span><br><span class="line">builder.append(winners.get(i).getName()).append(MESSAGE_COMMA_WITH_SPACE);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="우승자-알아내기"><a href="#우승자-알아내기" class="headerlink" title="우승자 알아내기"></a>우승자 알아내기</h3><p>Car의 우승 여부를 알려면 각 Car의 위치를 알아야 한다.</p><p>그런데 나는 앞서 말했듯이 우승여부를 다른 객체(RacingReferee)가 한다고 했다.<br>이미 Car 객체의 위치값은 private인데 어떻게 RacingReferee가 이를 계산해서 처리할 것인가?</p><p>가장 편한 대답은 아까처럼 default getter를 만드는 방법이다.<br>하지만 검색을 좀 해봤더니 다른 방식을 알아냈다.</p><p>바로 <strong>Comparable로 정렬하기</strong> 이다.</p><p>Car를 Comparable로 정렬 기준을 만들자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Car otherCar)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> otherCar.position - <span class="keyword">this</span>.position;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>이렇게 해놓으면 외부에서 자동차 위치를 알지 못해도 compareTo로 자동차들의 위치를 비교한다!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RacingReferee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Car&gt; winners;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findWinner</span><span class="params">(List&lt;Car&gt; participantCars)</span> </span>&#123;</span><br><span class="line">Collections.sort(participantCars);<span class="comment">//</span></span><br><span class="line">Car winner = participantCars.get(WINNER_INDEX);</span><br><span class="line"><span class="keyword">this</span>.winners = participantCars.stream()</span><br><span class="line">.filter(car -&gt; car.compareTo(winner) == COMPARE_WINNER_RESULT)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RacingReferee는 Car가 어떤 식으로 정렬하는지 알지 못해도 일단 <code>Collections.sort()</code> 하면 우승자 순으로 정렬된다는거만 안다.</p><p>나름 캡슐화를 지킨 방식이라서 재밌었다.</p><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><p>이번 주차는 비교적 수월하게 했다. 지난주에 설계를 못한다는 생각에 충격을 먹어서, 급하게 객체지향 관련 책을 찾아 본 게 큰 도움이 된거 같다.</p><p>지난 야구 게임을 구현할 때는 한 클래스가 거의 모든 데이터를 독점하고, 여러 일을 책임지고 있는 좋지 않은 설계로 구현했었다.</p><p>이번 문제는 강제로 Car 객체를 사용해야되서 자연스럽게 여러 객체들을 협력에 동참시켜야 했다.<br>특히 이번엔 한 클래스가 데이터를 독점하지 못하도록 어떤 부분에 다른 클래스로 대체할 것인지 고민을 많이 했다.<br>그 고민을 통해 등장시킨게 RacingReferee였다. 이 객체는 우승자를 가지고, 스스로 관리하게 설계했다는 점에서 만족스러웠다.</p><p>그리고 Comparator와 Comparable에 대해 공부할 수 있는 기회였다.<br>최대한 캡슐화를 지키면서 우승 자동차를 구하는 방법을 찾다보니 평소에 잘 이해하지 못했던 개념을 제대로 이해할 수 있었다.<br>이런 아이디어를 내가 직접 생각해낸게 아니라서, 만약 실제 코딩테스트 상황에서 이런 문제를 만나면 어찌해야 될 지 고민이 되긴한다.</p><p>하지만 아직 부족한 부분이 많다.<br>대표적으로 README 작성. 살아있는 문서를 작성하라는데, 이게 좀 힘들다.<br>의외라고 생각할 수 있는데, 나는 문제를 풀 때, 구현에 집중하다 보면, README는 안중에도 없게 된다.(…)<br>그래서 이번엔 비교적 좀 더 신경을 썼는데, 아직 부족한 거 같기도 하다…</p><p>그리고 테스트 코드 작성도 많이 부족하다.<br>나는 사실 이 문제를 여러번 풀어보고 제출한다.<br>이번 주 문제인 레이싱 문제도 대충 3번정도 풀어보고 제출하는 거다.<br>그래서 제출 코드에는 굳이 테스트 코드가 필요없다. 이미 많이 시도해본 코드들이기 때문이다.</p><p>근데 실전에서는 그럴 시간이 없다. 5시간안에 여러번 푼다는건 말도 안된다 ㅋㅋ.<br>그래서 테스트 코드를 작성하는 법을 배워야 한다는 걸 느꼈다.<br>JUnit와 TDD에 대해 공부하려고 한다.</p><p>아직 많이 부족하다.</p>]]></content:encoded>
      
      
      
      <category domain="https://yangdongjue5510.github.io/tags/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4/">우아한테크코스</category>
      
      
      <comments>https://yangdongjue5510.github.io/2021/12/05/java/woowa-tech-course/utecoprecourse2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>13. Comparable과 Comparator의 차이!</title>
      <link>https://yangdongjue5510.github.io/2021/12/03/java/java-basic/java13/</link>
      <guid>https://yangdongjue5510.github.io/2021/12/03/java/java-basic/java13/</guid>
      <pubDate>Fri, 03 Dec 2021 01:29:20 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Comparable과-Comparator의-차이&quot;&gt;&lt;a href=&quot;#Comparable과-Comparator의-차이&quot; class=&quot;headerlink&quot; title=&quot;Comparable과 Comparator의 차이&quot;&gt;&lt;/a&gt;Comparab</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Comparable과-Comparator의-차이"><a href="#Comparable과-Comparator의-차이" class="headerlink" title="Comparable과 Comparator의 차이"></a>Comparable과 Comparator의 차이</h1><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>둘 다 객체의 비교 기준을 마련하는 인터페이스.</p><p><strong>Comparable</strong>은 **compareTo(T t)**로 자기 자신과 다른 객체의 비교.<br><strong>Comparator</strong>은 <strong>compare(T t, T u)</strong> 자기 자신이 아닌 다른 두 객체 간의 비교.</p><p>Comparable은 <strong>Arrays.sort()나 Collections.sort()를 했을 경우 비교 기준을 제공</strong>한다.<br>Comparator는 <strong>새로운 비교기준이 필요할 때 익명 클래스로 활용</strong> 가능.</p><h2 id="실험"><a href="#실험" class="headerlink" title="실험"></a>실험</h2><h3 id="실험에-필요한-Student"><a href="#실험에-필요한-Student" class="headerlink" title="실험에 필요한 Student"></a>실험에 필요한 Student</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;age = &quot;</span>+age+<span class="string">&quot; score = &quot;</span>+score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일단 정렬 실험에 사용될 객체를 만들어봤다. 이제 age나 score에 따라 다르게 구현해보자.</p><h3 id="Comparable와-Comparator를-클래스에-적용하기"><a href="#Comparable와-Comparator를-클래스에-적용하기" class="headerlink" title="Comparable와 Comparator를 클래스에 적용하기"></a>Comparable와 Comparator를 클래스에 적용하기</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age - o.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Comparable</strong>을 활용하려면 <strong>compareTo</strong>메서드를 구현해야 한다.</p><p>이 메서드는 자기 자신과 다른 객체를 비교한다. (return 값이 양수면 자기 자신 우선, 음수면 다른 객체 우선)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Comparator</strong>는 <strong>compare</strong>메서드를 구현해야 한다.</p><p>이 메서드는 서로 다른 객체 두개를 비교한다.</p><h3 id="정렬-실험해보기"><a href="#정렬-실험해보기" class="headerlink" title="정렬 실험해보기"></a>정렬 실험해보기</h3><p>문제는 Comparable을 구현한 경우와 Comparator를 구현한 경우가 정렬을 할 때 다르다는 점이다!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//implements Comparable&lt;Student&gt; 한 경우</span></span><br><span class="line">Arrays.sort(arr);<span class="comment">//성공!</span></span><br><span class="line">Collections.sort(list);<span class="comment">//성공!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//implements Comparator&lt;Student&gt; 한 경우</span></span><br><span class="line">Arrays.sort(arr);<span class="comment">//컴파일 에러!!</span></span><br><span class="line">Collections.sort(list);<span class="comment">//컴파일 에러!!</span></span><br></pre></td></tr></table></figure><p>실험해보니, <strong>Comparable을 구현했을 때만 정렬이 가능</strong>했다!!<br>Comparator를 구현한 경우 Comparable이 구현되지 않았다며 컴파일 에러를 일으켰다!</p><h4 id="그러면-Comparator는-왜-있는거에요"><a href="#그러면-Comparator는-왜-있는거에요" class="headerlink" title="그러면 Comparator는 왜 있는거에요?"></a>그러면 Comparator는 왜 있는거에요?</h4><p>Student 클래스가 Comparable을 구현하고, 정렬을 age 기준으로 오름차순으로 정렬됐다고 하자.</p><p>근데 프로그래밍하다가 Student를 score 기준으로 오름차 정렬해야 되는 요구사항이 생겼다면?<br>이미 age로 정렬하여 사용하고 있는 곳이 있으면, Comparable을 바꿀수도 없다.</p><p>그럴 때 <strong>익명클래스를 활용한 Comparator</strong>를 통해 해결한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.getScore() - o2.getScore();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/java/">Java</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/java/java-basic/">Java Basic</category>
      
      
      
      <comments>https://yangdongjue5510.github.io/2021/12/03/java/java-basic/java13/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>REST Api 프로젝트에서 만난 소소한 문제들</title>
      <link>https://yangdongjue5510.github.io/2021/12/02/spring/restproject1/</link>
      <guid>https://yangdongjue5510.github.io/2021/12/02/spring/restproject1/</guid>
      <pubDate>Thu, 02 Dec 2021 02:44:58 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Rest api 프로젝트를 하면서 배운 것들을 정리하고자 한다.&lt;/p&gt;
&lt;h2 id=&quot;JPA-entity에서-배운-것들&quot;&gt;&lt;a href=&quot;#JPA-entity에서-배운-것들&quot; class=&quot;headerlink&quot; title=&quot;JPA entity에서 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>Rest api 프로젝트를 하면서 배운 것들을 정리하고자 한다.</p><h2 id="JPA-entity에서-배운-것들"><a href="#JPA-entity에서-배운-것들" class="headerlink" title="JPA entity에서 배운 것들"></a>JPA entity에서 배운 것들</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Investments</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line"><span class="meta">@Column(nullable = false)</span></span><br><span class="line"><span class="keyword">private</span> Long investId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(nullable = false)</span></span><br><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToOne</span><span class="comment">//다대일 관계</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Products product;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(nullable = false)</span></span><br><span class="line"><span class="keyword">private</span> Long investmentAmount;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Temporal(TemporalType.DATE)</span></span><br><span class="line"><span class="keyword">private</span> Date investmentDate = <span class="keyword">new</span> Date(); <span class="comment">//기본값을 현재로??</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line"><span class="keyword">private</span> InvestmentStatus investmentStatus = InvestmentStatus.VALID;<span class="comment">//기본값을 유효로 ?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JPA와 디비에는 사용하고 싶지 않지만, VO 클래스 멤버 변수로 사용하고 싶은 변수는 <strong>@Transient</strong>를 붙인다.</p><p>이번 프로젝트에서는 h2 디비를 썼다. h2에서는 기본키 자동증가기능을 사용하려면 <strong>@GeneratedValue(strategy = GenerationType.IDENTITY)</strong> 를 써야 잘 작동했다. </p><p>칼럼의 NOT NULL은 <strong>@Column(nullable = false)</strong> 로 처리했다. (@NotNull은 안됐다.)</p><p><strong>@Temporal(TemporalType.DATE)</strong> 는 날짜시간 데이터 중 날짜 데이터를 저장한다는 의미다.<br>시분초는 0으로 처리되어 저장된다.</p><p>**@Enumerated(EnumType.STRING)**은 열거형 데이터를 저장할 때 쓰인다.<br>이번 프로젝트는 열거형 이름 그 자체를 도입했다.</p><h2 id="헤더-값-읽기"><a href="#헤더-값-읽기" class="headerlink" title="헤더 값 읽기"></a>헤더 값 읽기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseDto&lt;List&lt;Products&gt;&gt; productGet(<span class="meta">@RequestHeader(&quot;X-USER-ID&quot;)</span> <span class="keyword">long</span> userId) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestHeader안에 헤더의 키값을 넣어주면 가져올 수 있다!</p><h2 id="SpringBoot-Could-not-find-acceptable-representation-Error-Request-failed-with-status-code-406"><a href="#SpringBoot-Could-not-find-acceptable-representation-Error-Request-failed-with-status-code-406" class="headerlink" title="SpringBoot Could not find acceptable representation(Error: Request failed with status code 406)"></a>SpringBoot Could not find acceptable representation(Error: Request failed with status code 406)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDto</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResponseDto</span><span class="params">(T data, HttpStatus status)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.status = status;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HttpStatus status;</span><br><span class="line">T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>406에러는 return된 객체에 setter getter가 없어서 일어났었다.</p><h2 id="stream으로-합구하기"><a href="#stream으로-합구하기" class="headerlink" title="stream으로 합구하기!"></a>stream으로 합구하기!</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; numbers = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>, <span class="number">5L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stream의 reduce 이용</span></span><br><span class="line">Long sum1 = numbers.stream().reduce(<span class="number">0L</span>, Long::sum);</span><br></pre></td></tr></table></figure><p>reduce를 이용하면 구할 수 있었다!!</p><h2 id="JSON으로-통신할-때-Object-Mapper로-케이스-변환하기"><a href="#JSON으로-통신할-때-Object-Mapper로-케이스-변환하기" class="headerlink" title="JSON으로 통신할 때 Object Mapper로 케이스 변환하기"></a>JSON으로 통신할 때 Object Mapper로 케이스 변환하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonNaming(value = PropertyNamingStrategy.SnakeCaseStrategy.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> phoneNumber; <span class="comment">//json에는 phone_number로 보임</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@JsonProperty(&quot;user_name&quot;)</span> <span class="comment">//특정 변수에만 적용할 경우.</span></span><br><span class="line">  <span class="keyword">private</span> userName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON을-반환할-때-ResponseEntity"><a href="#JSON을-반환할-때-ResponseEntity" class="headerlink" title="JSON을 반환할 때 ResponseEntity"></a>JSON을 반환할 때 ResponseEntity</h2><p>나는 커스텀해서 ResponseDto를 만들었는데 자바에서는 이미 ResponseEntity가 있더라 크흠…</p><h2 id="SQL-INIT"><a href="#SQL-INIT" class="headerlink" title="SQL INIT"></a>SQL INIT</h2><p>어플리케이션을 시작할 때 SQL을 실행해서 스키마를 만들고 데이터를 입력할 수 있다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">sql:</span></span><br><span class="line">    <span class="attr">init:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">h2</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p><strong>application.yml</strong>에 다음같이 적으면, 항상 어플리케이션을 시작할 때 SQL을 초기화해준다.</p><p>Resources 폴더에 schema-플랫폼이름.sql , data-플랫폼이름.sql 을 실행한다.</p><p>위 예시는 플랫폼을 h2로 했으니, <strong>schema-h2.sql</strong>, <strong>data-h2.sql</strong>이라고 하면된다!!</p><p>이때 <strong>ddl-auto</strong>는 꺼줘여야 잘 작동하게 된다!!</p><h2 id="JPA-Method이름으로-쿼리-만들기"><a href="#JPA-Method이름으로-쿼리-만들기" class="headerlink" title="JPA Method이름으로 쿼리 만들기"></a>JPA Method이름으로 쿼리 만들기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvestmentsRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Investments</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> Investments <span class="title">updateInvestStatus</span><span class="params">(Investments invest, InvestmentStatus status)</span> </span>&#123;</span><br><span class="line">invest.setStatus(status);</span><br><span class="line">save(invest);</span><br><span class="line"><span class="keyword">return</span> invest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Investments&gt; <span class="title">findInvestmentsByIdAndStatusEquals</span><span class="params">(<span class="keyword">long</span> productId, InvestmentStatus investmentStatus)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Investments&gt; <span class="title">findInvestmentsByUserId</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Investments <span class="title">findInvestmentsByUserIdAndIdAndStatusEquals</span><span class="params">(<span class="keyword">long</span> UserId, <span class="keyword">long</span> productId, InvestmentStatus status)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>레퍼지토리에 우리가 원하는 쿼리의 역할을 메서드 이름으로 만들면 그에 해당하는 쿼리를 실행하는 메서드가 만들어진다.</p><h2 id="전역-예외-핸들러"><a href="#전역-예외-핸들러" class="headerlink" title="전역 예외 핸들러"></a>전역 예외 핸들러</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDto&lt;String&gt; <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseDto&lt;&gt;(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예외 핸들러를 따로 만들면, 모든 예외 발생을 다음 메서드로 처리한다.</p><h2 id="생성자-주입"><a href="#생성자-주입" class="headerlink" title="생성자 주입"></a>생성자 주입</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ProductsService productsService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InvestmentsService investmentsService;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>@Autowired 키워드를 쓰는 것보다 @RequiredArgsConstructor와 private final 키워드를 활용한 생성자 주입이 스프링에서 더 권장하는 방법이다.</p><p>나도 이 방법을 사용하기 전까지 순환 참조를 하고 있는 줄 모르고 있었는데, 생성자 주입으로 변경하는 과정에서 실수를 확인 할 수 있었다.</p>]]></content:encoded>
      
      
      <category domain="https://yangdongjue5510.github.io/categories/spring/">Spring</category>
      
      <category domain="https://yangdongjue5510.github.io/categories/spring/project/">Project</category>
      
      
      <category domain="https://yangdongjue5510.github.io/tags/reshapi-project/">reshapi project</category>
      
      <category domain="https://yangdongjue5510.github.io/tags/troubleshooting/">troubleShooting</category>
      
      
      <comments>https://yangdongjue5510.github.io/2021/12/02/spring/restproject1/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
